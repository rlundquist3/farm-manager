{"version":3,"sources":["meteor://ðŸ’»app/packages/chart_chart/packages/chart_chart.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4E","file":"/packages/chart_chart.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/chart:chart/Chart.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!                                                                                                                   // 1\n * Chart.js                                                                                                           // 2\n * http://chartjs.org/                                                                                                // 3\n * Version: 1.0.1-beta.4                                                                                              // 4\n *                                                                                                                    // 5\n * Copyright 2014 Nick Downie                                                                                         // 6\n * Released under the MIT license                                                                                     // 7\n * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md                                                          // 8\n */                                                                                                                   // 9\n                                                                                                                      // 10\n                                                                                                                      // 11\n(function(){                                                                                                          // 12\n                                                                                                                      // 13\n\t\"use strict\";                                                                                                        // 14\n                                                                                                                      // 15\n\t//Declare root variable - window in the browser, global on the server                                                // 16\n\tvar root = this,                                                                                                     // 17\n\t\tprevious = root.Chart;                                                                                              // 18\n                                                                                                                      // 19\n\t//Occupy the global variable of Chart, and create a simple base class                                                // 20\n\tvar Chart = function(context){                                                                                       // 21\n\t\tvar chart = this;                                                                                                   // 22\n\t\tthis.canvas = context.canvas;                                                                                       // 23\n                                                                                                                      // 24\n\t\tthis.ctx = context;                                                                                                 // 25\n                                                                                                                      // 26\n\t\t//Variables global to the chart                                                                                     // 27\n\t\tvar width = this.width = context.canvas.width;                                                                      // 28\n\t\tvar height = this.height = context.canvas.height;                                                                   // 29\n\t\tthis.aspectRatio = this.width / this.height;                                                                        // 30\n\t\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale. // 31\n\t\thelpers.retinaScale(this);                                                                                          // 32\n                                                                                                                      // 33\n\t\treturn this;                                                                                                        // 34\n\t};                                                                                                                   // 35\n\t//Globally expose the defaults to allow for user updating/changing                                                   // 36\n\tChart.defaults = {                                                                                                   // 37\n\t\tglobal: {                                                                                                           // 38\n\t\t\t// Boolean - Whether to animate the chart                                                                          // 39\n\t\t\tanimation: true,                                                                                                   // 40\n                                                                                                                      // 41\n\t\t\t// Number - Number of animation steps                                                                              // 42\n\t\t\tanimationSteps: 60,                                                                                                // 43\n                                                                                                                      // 44\n\t\t\t// String - Animation easing effect                                                                                // 45\n\t\t\tanimationEasing: \"easeOutQuart\",                                                                                   // 46\n                                                                                                                      // 47\n\t\t\t// Boolean - If we should show the scale at all                                                                    // 48\n\t\t\tshowScale: true,                                                                                                   // 49\n                                                                                                                      // 50\n\t\t\t// Boolean - If we want to override with a hard coded scale                                                        // 51\n\t\t\tscaleOverride: false,                                                                                              // 52\n                                                                                                                      // 53\n\t\t\t// ** Required if scaleOverride is true **                                                                         // 54\n\t\t\t// Number - The number of steps in a hard coded scale                                                              // 55\n\t\t\tscaleSteps: null,                                                                                                  // 56\n\t\t\t// Number - The value jump in the hard coded scale                                                                 // 57\n\t\t\tscaleStepWidth: null,                                                                                              // 58\n\t\t\t// Number - The scale starting value                                                                               // 59\n\t\t\tscaleStartValue: null,                                                                                             // 60\n                                                                                                                      // 61\n\t\t\t// String - Colour of the scale line                                                                               // 62\n\t\t\tscaleLineColor: \"rgba(0,0,0,.1)\",                                                                                  // 63\n                                                                                                                      // 64\n\t\t\t// Number - Pixel width of the scale line                                                                          // 65\n\t\t\tscaleLineWidth: 1,                                                                                                 // 66\n                                                                                                                      // 67\n\t\t\t// Boolean - Whether to show labels on the scale                                                                   // 68\n\t\t\tscaleShowLabels: true,                                                                                             // 69\n                                                                                                                      // 70\n\t\t\t// Interpolated JS string - can access value                                                                       // 71\n\t\t\tscaleLabel: \"<%=value%>\",                                                                                          // 72\n                                                                                                                      // 73\n\t\t\t// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there    // 74\n\t\t\tscaleIntegersOnly: true,                                                                                           // 75\n                                                                                                                      // 76\n\t\t\t// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value           // 77\n\t\t\tscaleBeginAtZero: false,                                                                                           // 78\n                                                                                                                      // 79\n\t\t\t// String - Scale label font declaration for the scale label                                                       // 80\n\t\t\tscaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",                                             // 81\n                                                                                                                      // 82\n\t\t\t// Number - Scale label font size in pixels                                                                        // 83\n\t\t\tscaleFontSize: 12,                                                                                                 // 84\n                                                                                                                      // 85\n\t\t\t// String - Scale label font weight style                                                                          // 86\n\t\t\tscaleFontStyle: \"normal\",                                                                                          // 87\n                                                                                                                      // 88\n\t\t\t// String - Scale label font colour                                                                                // 89\n\t\t\tscaleFontColor: \"#666\",                                                                                            // 90\n                                                                                                                      // 91\n\t\t\t// Boolean - whether or not the chart should be responsive and resize when the browser does.                       // 92\n\t\t\tresponsive: false,                                                                                                 // 93\n                                                                                                                      // 94\n                        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n                        maintainAspectRatio: true,                                                                    // 96\n                                                                                                                      // 97\n\t\t\t// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove   // 98\n\t\t\tshowTooltips: true,                                                                                                // 99\n                                                                                                                      // 100\n\t\t\t// Array - Array of string names to attach tooltip events                                                          // 101\n\t\t\ttooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\", \"mouseout\"],                                               // 102\n                                                                                                                      // 103\n\t\t\t// String - Tooltip background colour                                                                              // 104\n\t\t\ttooltipFillColor: \"rgba(0,0,0,0.8)\",                                                                               // 105\n                                                                                                                      // 106\n\t\t\t// String - Tooltip label font declaration for the scale label                                                     // 107\n\t\t\ttooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",                                           // 108\n                                                                                                                      // 109\n\t\t\t// Number - Tooltip label font size in pixels                                                                      // 110\n\t\t\ttooltipFontSize: 14,                                                                                               // 111\n                                                                                                                      // 112\n\t\t\t// String - Tooltip font weight style                                                                              // 113\n\t\t\ttooltipFontStyle: \"normal\",                                                                                        // 114\n                                                                                                                      // 115\n\t\t\t// String - Tooltip label font colour                                                                              // 116\n\t\t\ttooltipFontColor: \"#fff\",                                                                                          // 117\n                                                                                                                      // 118\n\t\t\t// String - Tooltip title font declaration for the scale label                                                     // 119\n\t\t\ttooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",                                      // 120\n                                                                                                                      // 121\n\t\t\t// Number - Tooltip title font size in pixels                                                                      // 122\n\t\t\ttooltipTitleFontSize: 14,                                                                                          // 123\n                                                                                                                      // 124\n\t\t\t// String - Tooltip title font weight style                                                                        // 125\n\t\t\ttooltipTitleFontStyle: \"bold\",                                                                                     // 126\n                                                                                                                      // 127\n\t\t\t// String - Tooltip title font colour                                                                              // 128\n\t\t\ttooltipTitleFontColor: \"#fff\",                                                                                     // 129\n                                                                                                                      // 130\n\t\t\t// Number - pixel width of padding around tooltip text                                                             // 131\n\t\t\ttooltipYPadding: 6,                                                                                                // 132\n                                                                                                                      // 133\n\t\t\t// Number - pixel width of padding around tooltip text                                                             // 134\n\t\t\ttooltipXPadding: 6,                                                                                                // 135\n                                                                                                                      // 136\n\t\t\t// Number - Size of the caret on the tooltip                                                                       // 137\n\t\t\ttooltipCaretSize: 8,                                                                                               // 138\n                                                                                                                      // 139\n\t\t\t// Number - Pixel radius of the tooltip border                                                                     // 140\n\t\t\ttooltipCornerRadius: 6,                                                                                            // 141\n                                                                                                                      // 142\n\t\t\t// Number - Pixel offset from point x to tooltip edge                                                              // 143\n\t\t\ttooltipXOffset: 10,                                                                                                // 144\n                                                                                                                      // 145\n\t\t\t// String - Template string for single tooltips                                                                    // 146\n\t\t\ttooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",                                                   // 147\n                                                                                                                      // 148\n\t\t\t// String - Template string for single tooltips                                                                    // 149\n\t\t\tmultiTooltipTemplate: \"<%= value %>\",                                                                              // 150\n                                                                                                                      // 151\n\t\t\t// String - Colour behind the legend colour block                                                                  // 152\n\t\t\tmultiTooltipKeyBackground: '#fff',                                                                                 // 153\n                                                                                                                      // 154\n\t\t\t// Function - Will fire on animation progression.                                                                  // 155\n\t\t\tonAnimationProgress: function(){},                                                                                 // 156\n                                                                                                                      // 157\n\t\t\t// Function - Will fire on animation completion.                                                                   // 158\n\t\t\tonAnimationComplete: function(){}                                                                                  // 159\n                                                                                                                      // 160\n\t\t}                                                                                                                   // 161\n\t};                                                                                                                   // 162\n                                                                                                                      // 163\n\t//Create a dictionary of chart types, to allow for extension of existing types                                       // 164\n\tChart.types = {};                                                                                                    // 165\n                                                                                                                      // 166\n\t//Global Chart helpers object for utility methods and classes                                                        // 167\n\tvar helpers = Chart.helpers = {};                                                                                    // 168\n                                                                                                                      // 169\n\t\t//-- Basic js utility methods                                                                                       // 170\n\tvar each = helpers.each = function(loopable,callback,self){                                                          // 171\n\t\t\tvar additionalArgs = Array.prototype.slice.call(arguments, 3);                                                     // 172\n\t\t\t// Check to see if null or undefined firstly.                                                                      // 173\n\t\t\tif (loopable){                                                                                                     // 174\n\t\t\t\tif (loopable.length === +loopable.length){                                                                        // 175\n\t\t\t\t\tvar i;                                                                                                           // 176\n\t\t\t\t\tfor (i=0; i<loopable.length; i++){                                                                               // 177\n\t\t\t\t\t\tcallback.apply(self,[loopable[i], i].concat(additionalArgs));                                                   // 178\n\t\t\t\t\t}                                                                                                                // 179\n\t\t\t\t}                                                                                                                 // 180\n\t\t\t\telse{                                                                                                             // 181\n\t\t\t\t\tfor (var item in loopable){                                                                                      // 182\n\t\t\t\t\t\tcallback.apply(self,[loopable[item],item].concat(additionalArgs));                                              // 183\n\t\t\t\t\t}                                                                                                                // 184\n\t\t\t\t}                                                                                                                 // 185\n\t\t\t}                                                                                                                  // 186\n\t\t},                                                                                                                  // 187\n\t\tclone = helpers.clone = function(obj){                                                                              // 188\n\t\t\tvar objClone = {};                                                                                                 // 189\n\t\t\teach(obj,function(value,key){                                                                                      // 190\n\t\t\t\tif (obj.hasOwnProperty(key)) objClone[key] = value;                                                               // 191\n\t\t\t});                                                                                                                // 192\n\t\t\treturn objClone;                                                                                                   // 193\n\t\t},                                                                                                                  // 194\n\t\textend = helpers.extend = function(base){                                                                           // 195\n\t\t\teach(Array.prototype.slice.call(arguments,1), function(extensionObject) {                                          // 196\n\t\t\t\teach(extensionObject,function(value,key){                                                                         // 197\n\t\t\t\t\tif (extensionObject.hasOwnProperty(key)) base[key] = value;                                                      // 198\n\t\t\t\t});                                                                                                               // 199\n\t\t\t});                                                                                                                // 200\n\t\t\treturn base;                                                                                                       // 201\n\t\t},                                                                                                                  // 202\n\t\tmerge = helpers.merge = function(base,master){                                                                      // 203\n\t\t\t//Merge properties in left object over to a shallow clone of object right.                                         // 204\n\t\t\tvar args = Array.prototype.slice.call(arguments,0);                                                                // 205\n\t\t\targs.unshift({});                                                                                                  // 206\n\t\t\treturn extend.apply(null, args);                                                                                   // 207\n\t\t},                                                                                                                  // 208\n\t\tindexOf = helpers.indexOf = function(arrayToSearch, item){                                                          // 209\n\t\t\tif (Array.prototype.indexOf) {                                                                                     // 210\n\t\t\t\treturn arrayToSearch.indexOf(item);                                                                               // 211\n\t\t\t}                                                                                                                  // 212\n\t\t\telse{                                                                                                              // 213\n\t\t\t\tfor (var i = 0; i < arrayToSearch.length; i++) {                                                                  // 214\n\t\t\t\t\tif (arrayToSearch[i] === item) return i;                                                                         // 215\n\t\t\t\t}                                                                                                                 // 216\n\t\t\t\treturn -1;                                                                                                        // 217\n\t\t\t}                                                                                                                  // 218\n\t\t},                                                                                                                  // 219\n\t\twhere = helpers.where = function(collection, filterCallback){                                                       // 220\n\t\t\tvar filtered = [];                                                                                                 // 221\n                                                                                                                      // 222\n\t\t\thelpers.each(collection, function(item){                                                                           // 223\n\t\t\t\tif (filterCallback(item)){                                                                                        // 224\n\t\t\t\t\tfiltered.push(item);                                                                                             // 225\n\t\t\t\t}                                                                                                                 // 226\n\t\t\t});                                                                                                                // 227\n                                                                                                                      // 228\n\t\t\treturn filtered;                                                                                                   // 229\n\t\t},                                                                                                                  // 230\n\t\tfindNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){                        // 231\n\t\t\t// Default to start of the array                                                                                   // 232\n\t\t\tif (!startIndex){                                                                                                  // 233\n\t\t\t\tstartIndex = -1;                                                                                                  // 234\n\t\t\t}                                                                                                                  // 235\n\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {                                                      // 236\n\t\t\t\tvar currentItem = arrayToSearch[i];                                                                               // 237\n\t\t\t\tif (filterCallback(currentItem)){                                                                                 // 238\n\t\t\t\t\treturn currentItem;                                                                                              // 239\n\t\t\t\t}                                                                                                                 // 240\n\t\t\t};                                                                                                                 // 241\n\t\t},                                                                                                                  // 242\n\t\tfindPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){                // 243\n\t\t\t// Default to end of the array                                                                                     // 244\n\t\t\tif (!startIndex){                                                                                                  // 245\n\t\t\t\tstartIndex = arrayToSearch.length;                                                                                // 246\n\t\t\t}                                                                                                                  // 247\n\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {                                                                        // 248\n\t\t\t\tvar currentItem = arrayToSearch[i];                                                                               // 249\n\t\t\t\tif (filterCallback(currentItem)){                                                                                 // 250\n\t\t\t\t\treturn currentItem;                                                                                              // 251\n\t\t\t\t}                                                                                                                 // 252\n\t\t\t};                                                                                                                 // 253\n\t\t},                                                                                                                  // 254\n\t\tinherits = helpers.inherits = function(extensions){                                                                 // 255\n\t\t\t//Basic javascript inheritance based on the model created in Backbone.js                                           // 256\n\t\t\tvar parent = this;                                                                                                 // 257\n\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty(\"constructor\")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };\n                                                                                                                      // 259\n\t\t\tvar Surrogate = function(){ this.constructor = ChartElement;};                                                     // 260\n\t\t\tSurrogate.prototype = parent.prototype;                                                                            // 261\n\t\t\tChartElement.prototype = new Surrogate();                                                                          // 262\n                                                                                                                      // 263\n\t\t\tChartElement.extend = inherits;                                                                                    // 264\n                                                                                                                      // 265\n\t\t\tif (extensions) extend(ChartElement.prototype, extensions);                                                        // 266\n                                                                                                                      // 267\n\t\t\tChartElement.__super__ = parent.prototype;                                                                         // 268\n                                                                                                                      // 269\n\t\t\treturn ChartElement;                                                                                               // 270\n\t\t},                                                                                                                  // 271\n\t\tnoop = helpers.noop = function(){},                                                                                 // 272\n\t\tuid = helpers.uid = (function(){                                                                                    // 273\n\t\t\tvar id=0;                                                                                                          // 274\n\t\t\treturn function(){                                                                                                 // 275\n\t\t\t\treturn \"chart-\" + id++;                                                                                           // 276\n\t\t\t};                                                                                                                 // 277\n\t\t})(),                                                                                                               // 278\n\t\twarn = helpers.warn = function(str){                                                                                // 279\n\t\t\t//Method for warning of errors                                                                                     // 280\n\t\t\tif (window.console && typeof window.console.warn == \"function\") console.warn(str);                                 // 281\n\t\t},                                                                                                                  // 282\n\t\tamd = helpers.amd = (typeof define == 'function' && define.amd),                                                    // 283\n\t\t//-- Math methods                                                                                                   // 284\n\t\tisNumber = helpers.isNumber = function(n){                                                                          // 285\n\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);                                                                       // 286\n\t\t},                                                                                                                  // 287\n\t\tmax = helpers.max = function(array){                                                                                // 288\n\t\t\treturn Math.max.apply( Math, array );                                                                              // 289\n\t\t},                                                                                                                  // 290\n\t\tmin = helpers.min = function(array){                                                                                // 291\n\t\t\treturn Math.min.apply( Math, array );                                                                              // 292\n\t\t},                                                                                                                  // 293\n\t\tcap = helpers.cap = function(valueToCap,maxValue,minValue){                                                         // 294\n\t\t\tif(isNumber(maxValue)) {                                                                                           // 295\n\t\t\t\tif( valueToCap > maxValue ) {                                                                                     // 296\n\t\t\t\t\treturn maxValue;                                                                                                 // 297\n\t\t\t\t}                                                                                                                 // 298\n\t\t\t}                                                                                                                  // 299\n\t\t\telse if(isNumber(minValue)){                                                                                       // 300\n\t\t\t\tif ( valueToCap < minValue ){                                                                                     // 301\n\t\t\t\t\treturn minValue;                                                                                                 // 302\n\t\t\t\t}                                                                                                                 // 303\n\t\t\t}                                                                                                                  // 304\n\t\t\treturn valueToCap;                                                                                                 // 305\n\t\t},                                                                                                                  // 306\n\t\tgetDecimalPlaces = helpers.getDecimalPlaces = function(num){                                                        // 307\n\t\t\tif (num%1!==0 && isNumber(num)){                                                                                   // 308\n\t\t\t\treturn num.toString().split(\".\")[1].length;                                                                       // 309\n\t\t\t}                                                                                                                  // 310\n\t\t\telse {                                                                                                             // 311\n\t\t\t\treturn 0;                                                                                                         // 312\n\t\t\t}                                                                                                                  // 313\n\t\t},                                                                                                                  // 314\n\t\ttoRadians = helpers.radians = function(degrees){                                                                    // 315\n\t\t\treturn degrees * (Math.PI/180);                                                                                    // 316\n\t\t},                                                                                                                  // 317\n\t\t// Gets the angle from vertical upright to the point about a centre.                                                // 318\n\t\tgetAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){                                  // 319\n\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,                                                            // 320\n\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,                                                               // 321\n\t\t\t\tradialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n                                                                                                                      // 323\n                                                                                                                      // 324\n\t\t\tvar angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);                                    // 325\n                                                                                                                      // 326\n\t\t\t//If the segment is in the top left quadrant, we need to add another rotation to the angle                         // 327\n\t\t\tif (distanceFromXCenter < 0 && distanceFromYCenter < 0){                                                           // 328\n\t\t\t\tangle += Math.PI*2;                                                                                               // 329\n\t\t\t}                                                                                                                  // 330\n                                                                                                                      // 331\n\t\t\treturn {                                                                                                           // 332\n\t\t\t\tangle: angle,                                                                                                     // 333\n\t\t\t\tdistance: radialDistanceFromCenter                                                                                // 334\n\t\t\t};                                                                                                                 // 335\n\t\t},                                                                                                                  // 336\n\t\taliasPixel = helpers.aliasPixel = function(pixelWidth){                                                             // 337\n\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;                                                                           // 338\n\t\t},                                                                                                                  // 339\n\t\tsplineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){                                  // 340\n\t\t\t//Props to Rob Spencer at scaled innovation for his post on splining between points                                // 341\n\t\t\t//http://scaledinnovation.com/analytics/splines/aboutSplines.html                                                  // 342\n\t\t\tvar d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),                  // 343\n\t\t\t\td12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),                     // 344\n\t\t\t\tfa=t*d01/(d01+d12),// scaling factor for triangle Ta                                                              // 345\n\t\t\t\tfb=t*d12/(d01+d12);                                                                                               // 346\n\t\t\treturn {                                                                                                           // 347\n\t\t\t\tinner : {                                                                                                         // 348\n\t\t\t\t\tx : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),                                                                // 349\n\t\t\t\t\ty : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)                                                                 // 350\n\t\t\t\t},                                                                                                                // 351\n\t\t\t\touter : {                                                                                                         // 352\n\t\t\t\t\tx: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),                                                                 // 353\n\t\t\t\t\ty : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)                                                                 // 354\n\t\t\t\t}                                                                                                                 // 355\n\t\t\t};                                                                                                                 // 356\n\t\t},                                                                                                                  // 357\n\t\tcalculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){                                      // 358\n\t\t\treturn Math.floor(Math.log(val) / Math.LN10);                                                                      // 359\n\t\t},                                                                                                                  // 360\n\t\tcalculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){\n                                                                                                                      // 362\n\t\t\t//Set a minimum step of two - a point at the top of the graph, and a point at the base                             // 363\n\t\t\tvar minSteps = 2,                                                                                                  // 364\n\t\t\t\tmaxSteps = Math.floor(drawingSize/(textSize * 1.5)),                                                              // 365\n\t\t\t\tskipFitting = (minSteps >= maxSteps);                                                                             // 366\n                                                                                                                      // 367\n\t\t\tvar maxValue = max(valuesArray),                                                                                   // 368\n\t\t\t\tminValue = min(valuesArray);                                                                                      // 369\n                                                                                                                      // 370\n\t\t\t// We need some degree of seperation here to calculate the scales if all the values are the same                   // 371\n\t\t\t// Adding/minusing 0.5 will give us a range of 1.                                                                  // 372\n\t\t\tif (maxValue === minValue){                                                                                        // 373\n\t\t\t\tmaxValue += 0.5;                                                                                                  // 374\n\t\t\t\t// So we don't end up with a graph with a negative start value if we've said always start from zero               // 375\n\t\t\t\tif (minValue >= 0.5 && !startFromZero){                                                                           // 376\n\t\t\t\t\tminValue -= 0.5;                                                                                                 // 377\n\t\t\t\t}                                                                                                                 // 378\n\t\t\t\telse{                                                                                                             // 379\n\t\t\t\t\t// Make up a whole number above the values                                                                       // 380\n\t\t\t\t\tmaxValue += 0.5;                                                                                                 // 381\n\t\t\t\t}                                                                                                                 // 382\n\t\t\t}                                                                                                                  // 383\n                                                                                                                      // 384\n\t\t\tvar\tvalueRange = Math.abs(maxValue - minValue),                                                                    // 385\n\t\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),                                                    // 386\n\t\t\t\tgraphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude), // 387\n\t\t\t\tgraphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphRange = graphMax - graphMin,                                                                                 // 389\n\t\t\t\tstepValue = Math.pow(10, rangeOrderOfMagnitude),                                                                  // 390\n\t\t\t\tnumberOfSteps = Math.round(graphRange / stepValue);                                                               // 391\n                                                                                                                      // 392\n\t\t\t//If we have more space on the graph we'll use it to give more definition to the data                              // 393\n\t\t\twhile((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {                              // 394\n\t\t\t\tif(numberOfSteps > maxSteps){                                                                                     // 395\n\t\t\t\t\tstepValue *=2;                                                                                                   // 396\n\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);                                                                // 397\n\t\t\t\t\t// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.     // 398\n\t\t\t\t\tif (numberOfSteps % 1 !== 0){                                                                                    // 399\n\t\t\t\t\t\tskipFitting = true;                                                                                             // 400\n\t\t\t\t\t}                                                                                                                // 401\n\t\t\t\t}                                                                                                                 // 402\n\t\t\t\t//We can fit in double the amount of scale points on the scale                                                    // 403\n\t\t\t\telse{                                                                                                             // 404\n\t\t\t\t\t//If user has declared ints only, and the step value isn't a decimal                                             // 405\n\t\t\t\t\tif (integersOnly && rangeOrderOfMagnitude >= 0){                                                                 // 406\n\t\t\t\t\t\t//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float\n\t\t\t\t\t\tif(stepValue/2 % 1 === 0){                                                                                      // 408\n\t\t\t\t\t\t\tstepValue /=2;                                                                                                 // 409\n\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);                                                              // 410\n\t\t\t\t\t\t}                                                                                                               // 411\n\t\t\t\t\t\t//If it would make it a float break out of the loop                                                             // 412\n\t\t\t\t\t\telse{                                                                                                           // 413\n\t\t\t\t\t\t\tbreak;                                                                                                         // 414\n\t\t\t\t\t\t}                                                                                                               // 415\n\t\t\t\t\t}                                                                                                                // 416\n\t\t\t\t\t//If the scale doesn't have to be an int, make the scale more granular anyway.                                   // 417\n\t\t\t\t\telse{                                                                                                            // 418\n\t\t\t\t\t\tstepValue /=2;                                                                                                  // 419\n\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);                                                               // 420\n\t\t\t\t\t}                                                                                                                // 421\n                                                                                                                      // 422\n\t\t\t\t}                                                                                                                 // 423\n\t\t\t}                                                                                                                  // 424\n                                                                                                                      // 425\n\t\t\tif (skipFitting){                                                                                                  // 426\n\t\t\t\tnumberOfSteps = minSteps;                                                                                         // 427\n\t\t\t\tstepValue = graphRange / numberOfSteps;                                                                           // 428\n\t\t\t}                                                                                                                  // 429\n                                                                                                                      // 430\n\t\t\treturn {                                                                                                           // 431\n\t\t\t\tsteps : numberOfSteps,                                                                                            // 432\n\t\t\t\tstepValue : stepValue,                                                                                            // 433\n\t\t\t\tmin : graphMin,                                                                                                   // 434\n\t\t\t\tmax\t: graphMin + (numberOfSteps * stepValue)                                                                      // 435\n\t\t\t};                                                                                                                 // 436\n                                                                                                                      // 437\n\t\t},                                                                                                                  // 438\n\t\t/* jshint ignore:start */                                                                                           // 439\n\t\t// Blows up jshint errors based on the new Function constructor                                                     // 440\n\t\t//Templating methods                                                                                                // 441\n\t\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/          // 442\n\t\ttemplate = helpers.template = function(templateString, valuesObject){                                               // 443\n\t\t\t // If templateString is function rather than string-template - call the function for valuesObject                 // 444\n\t\t\tif(templateString instanceof Function){                                                                            // 445\n\t\t\t \treturn templateString(valuesObject);                                                                             // 446\n\t\t \t}                                                                                                                 // 447\n                                                                                                                      // 448\n\t\t\tvar cache = {};                                                                                                    // 449\n\t\t\tfunction tmpl(str, data){                                                                                          // 450\n\t\t\t\t// Figure out if we're getting a template, or if we need to                                                       // 451\n\t\t\t\t// load the template - and be sure to cache the result.                                                           // 452\n\t\t\t\tvar fn = !/\\W/.test(str) ?                                                                                        // 453\n\t\t\t\tcache[str] = cache[str] :                                                                                         // 454\n                                                                                                                      // 455\n\t\t\t\t// Generate a reusable function that will serve as a template                                                     // 456\n\t\t\t\t// generator (and which will be cached).                                                                          // 457\n\t\t\t\tnew Function(\"obj\",                                                                                               // 458\n\t\t\t\t\t\"var p=[],print=function(){p.push.apply(p,arguments);};\" +                                                       // 459\n                                                                                                                      // 460\n\t\t\t\t\t// Introduce the data as local variables using with(){}                                                          // 461\n\t\t\t\t\t\"with(obj){p.push('\" +                                                                                           // 462\n                                                                                                                      // 463\n\t\t\t\t\t// Convert the template into pure JavaScript                                                                     // 464\n\t\t\t\t\tstr                                                                                                              // 465\n\t\t\t\t\t\t.replace(/[\\r\\t\\n]/g, \" \")                                                                                      // 466\n\t\t\t\t\t\t.split(\"<%\").join(\"\\t\")                                                                                         // 467\n\t\t\t\t\t\t.replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")                                                                            // 468\n\t\t\t\t\t\t.replace(/\\t=(.*?)%>/g, \"',$1,'\")                                                                               // 469\n\t\t\t\t\t\t.split(\"\\t\").join(\"');\")                                                                                        // 470\n\t\t\t\t\t\t.split(\"%>\").join(\"p.push('\")                                                                                   // 471\n\t\t\t\t\t\t.split(\"\\r\").join(\"\\\\'\") +                                                                                      // 472\n\t\t\t\t\t\"');}return p.join('');\"                                                                                         // 473\n\t\t\t\t);                                                                                                                // 474\n                                                                                                                      // 475\n\t\t\t\t// Provide some basic currying to the user                                                                        // 476\n\t\t\t\treturn data ? fn( data ) : fn;                                                                                    // 477\n\t\t\t}                                                                                                                  // 478\n\t\t\treturn tmpl(templateString,valuesObject);                                                                          // 479\n\t\t},                                                                                                                  // 480\n\t\t/* jshint ignore:end */                                                                                             // 481\n\t\tgenerateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){                // 482\n\t\t\tvar labelsArray = new Array(numberOfSteps);                                                                        // 483\n\t\t\tif (labelTemplateString){                                                                                          // 484\n\t\t\t\teach(labelsArray,function(val,index){                                                                             // 485\n\t\t\t\t\tlabelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});                       // 486\n\t\t\t\t});                                                                                                               // 487\n\t\t\t}                                                                                                                  // 488\n\t\t\treturn labelsArray;                                                                                                // 489\n\t\t},                                                                                                                  // 490\n\t\t//--Animation methods                                                                                               // 491\n\t\t//Easing functions adapted from Robert Penner's easing equations                                                    // 492\n\t\t//http://www.robertpenner.com/easing/                                                                               // 493\n\t\teasingEffects = helpers.easingEffects = {                                                                           // 494\n\t\t\tlinear: function (t) {                                                                                             // 495\n\t\t\t\treturn t;                                                                                                         // 496\n\t\t\t},                                                                                                                 // 497\n\t\t\teaseInQuad: function (t) {                                                                                         // 498\n\t\t\t\treturn t * t;                                                                                                     // 499\n\t\t\t},                                                                                                                 // 500\n\t\t\teaseOutQuad: function (t) {                                                                                        // 501\n\t\t\t\treturn -1 * t * (t - 2);                                                                                          // 502\n\t\t\t},                                                                                                                 // 503\n\t\t\teaseInOutQuad: function (t) {                                                                                      // 504\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t;                                                                       // 505\n\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);                                                                            // 506\n\t\t\t},                                                                                                                 // 507\n\t\t\teaseInCubic: function (t) {                                                                                        // 508\n\t\t\t\treturn t * t * t;                                                                                                 // 509\n\t\t\t},                                                                                                                 // 510\n\t\t\teaseOutCubic: function (t) {                                                                                       // 511\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);                                                                         // 512\n\t\t\t},                                                                                                                 // 513\n\t\t\teaseInOutCubic: function (t) {                                                                                     // 514\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;                                                                   // 515\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);                                                                            // 516\n\t\t\t},                                                                                                                 // 517\n\t\t\teaseInQuart: function (t) {                                                                                        // 518\n\t\t\t\treturn t * t * t * t;                                                                                             // 519\n\t\t\t},                                                                                                                 // 520\n\t\t\teaseOutQuart: function (t) {                                                                                       // 521\n\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);                                                                    // 522\n\t\t\t},                                                                                                                 // 523\n\t\t\teaseInOutQuart: function (t) {                                                                                     // 524\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;                                                               // 525\n\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);                                                                       // 526\n\t\t\t},                                                                                                                 // 527\n\t\t\teaseInQuint: function (t) {                                                                                        // 528\n\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;                                                                              // 529\n\t\t\t},                                                                                                                 // 530\n\t\t\teaseOutQuint: function (t) {                                                                                       // 531\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);                                                                 // 532\n\t\t\t},                                                                                                                 // 533\n\t\t\teaseInOutQuint: function (t) {                                                                                     // 534\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;                                                           // 535\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);                                                                    // 536\n\t\t\t},                                                                                                                 // 537\n\t\t\teaseInSine: function (t) {                                                                                         // 538\n\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;                                                                  // 539\n\t\t\t},                                                                                                                 // 540\n\t\t\teaseOutSine: function (t) {                                                                                        // 541\n\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));                                                                       // 542\n\t\t\t},                                                                                                                 // 543\n\t\t\teaseInOutSine: function (t) {                                                                                      // 544\n\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);                                                                  // 545\n\t\t\t},                                                                                                                 // 546\n\t\t\teaseInExpo: function (t) {                                                                                         // 547\n\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));                                                         // 548\n\t\t\t},                                                                                                                 // 549\n\t\t\teaseOutExpo: function (t) {                                                                                        // 550\n\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);                                                       // 551\n\t\t\t},                                                                                                                 // 552\n\t\t\teaseInOutExpo: function (t) {                                                                                      // 553\n\t\t\t\tif (t === 0) return 0;                                                                                            // 554\n\t\t\t\tif (t === 1) return 1;                                                                                            // 555\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));                                                   // 556\n\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);                                                                     // 557\n\t\t\t},                                                                                                                 // 558\n\t\t\teaseInCirc: function (t) {                                                                                         // 559\n\t\t\t\tif (t >= 1) return t;                                                                                             // 560\n\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);                                                                    // 561\n\t\t\t},                                                                                                                 // 562\n\t\t\teaseOutCirc: function (t) {                                                                                        // 563\n\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);                                                                    // 564\n\t\t\t},                                                                                                                 // 565\n\t\t\teaseInOutCirc: function (t) {                                                                                      // 566\n\t\t\t\tif ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);                                                 // 567\n\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);                                                                 // 568\n\t\t\t},                                                                                                                 // 569\n\t\t\teaseInElastic: function (t) {                                                                                      // 570\n\t\t\t\tvar s = 1.70158;                                                                                                  // 571\n\t\t\t\tvar p = 0;                                                                                                        // 572\n\t\t\t\tvar a = 1;                                                                                                        // 573\n\t\t\t\tif (t === 0) return 0;                                                                                            // 574\n\t\t\t\tif ((t /= 1) == 1) return 1;                                                                                      // 575\n\t\t\t\tif (!p) p = 1 * 0.3;                                                                                              // 576\n\t\t\t\tif (a < Math.abs(1)) {                                                                                            // 577\n\t\t\t\t\ta = 1;                                                                                                           // 578\n\t\t\t\t\ts = p / 4;                                                                                                       // 579\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);                                                                  // 580\n\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));                             // 581\n\t\t\t},                                                                                                                 // 582\n\t\t\teaseOutElastic: function (t) {                                                                                     // 583\n\t\t\t\tvar s = 1.70158;                                                                                                  // 584\n\t\t\t\tvar p = 0;                                                                                                        // 585\n\t\t\t\tvar a = 1;                                                                                                        // 586\n\t\t\t\tif (t === 0) return 0;                                                                                            // 587\n\t\t\t\tif ((t /= 1) == 1) return 1;                                                                                      // 588\n\t\t\t\tif (!p) p = 1 * 0.3;                                                                                              // 589\n\t\t\t\tif (a < Math.abs(1)) {                                                                                            // 590\n\t\t\t\t\ta = 1;                                                                                                           // 591\n\t\t\t\t\ts = p / 4;                                                                                                       // 592\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);                                                                  // 593\n\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;                                  // 594\n\t\t\t},                                                                                                                 // 595\n\t\t\teaseInOutElastic: function (t) {                                                                                   // 596\n\t\t\t\tvar s = 1.70158;                                                                                                  // 597\n\t\t\t\tvar p = 0;                                                                                                        // 598\n\t\t\t\tvar a = 1;                                                                                                        // 599\n\t\t\t\tif (t === 0) return 0;                                                                                            // 600\n\t\t\t\tif ((t /= 1 / 2) == 2) return 1;                                                                                  // 601\n\t\t\t\tif (!p) p = 1 * (0.3 * 1.5);                                                                                      // 602\n\t\t\t\tif (a < Math.abs(1)) {                                                                                            // 603\n\t\t\t\t\ta = 1;                                                                                                           // 604\n\t\t\t\t\ts = p / 4;                                                                                                       // 605\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);                                                                  // 606\n\t\t\t\tif (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));            // 607\n\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;                     // 608\n\t\t\t},                                                                                                                 // 609\n\t\t\teaseInBack: function (t) {                                                                                         // 610\n\t\t\t\tvar s = 1.70158;                                                                                                  // 611\n\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);                                                                      // 612\n\t\t\t},                                                                                                                 // 613\n\t\t\teaseOutBack: function (t) {                                                                                        // 614\n\t\t\t\tvar s = 1.70158;                                                                                                  // 615\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);                                                         // 616\n\t\t\t},                                                                                                                 // 617\n\t\t\teaseInOutBack: function (t) {                                                                                      // 618\n\t\t\t\tvar s = 1.70158;                                                                                                  // 619\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));                                    // 620\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);                                               // 621\n\t\t\t},                                                                                                                 // 622\n\t\t\teaseInBounce: function (t) {                                                                                       // 623\n\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);                                                                    // 624\n\t\t\t},                                                                                                                 // 625\n\t\t\teaseOutBounce: function (t) {                                                                                      // 626\n\t\t\t\tif ((t /= 1) < (1 / 2.75)) {                                                                                      // 627\n\t\t\t\t\treturn 1 * (7.5625 * t * t);                                                                                     // 628\n\t\t\t\t} else if (t < (2 / 2.75)) {                                                                                      // 629\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);                                                            // 630\n\t\t\t\t} else if (t < (2.5 / 2.75)) {                                                                                    // 631\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);                                                         // 632\n\t\t\t\t} else {                                                                                                          // 633\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);                                                      // 634\n\t\t\t\t}                                                                                                                 // 635\n\t\t\t},                                                                                                                 // 636\n\t\t\teaseInOutBounce: function (t) {                                                                                    // 637\n\t\t\t\tif (t < 1 / 2) return easingEffects.easeInBounce(t * 2) * 0.5;                                                    // 638\n\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;                                                    // 639\n\t\t\t}                                                                                                                  // 640\n\t\t},                                                                                                                  // 641\n\t\t//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/             // 642\n\t\trequestAnimFrame = helpers.requestAnimFrame = (function(){                                                          // 643\n\t\t\treturn window.requestAnimationFrame ||                                                                             // 644\n\t\t\t\twindow.webkitRequestAnimationFrame ||                                                                             // 645\n\t\t\t\twindow.mozRequestAnimationFrame ||                                                                                // 646\n\t\t\t\twindow.oRequestAnimationFrame ||                                                                                  // 647\n\t\t\t\twindow.msRequestAnimationFrame ||                                                                                 // 648\n\t\t\t\tfunction(callback) {                                                                                              // 649\n\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);                                                                   // 650\n\t\t\t\t};                                                                                                                // 651\n\t\t})(),                                                                                                               // 652\n\t\tcancelAnimFrame = helpers.cancelAnimFrame = (function(){                                                            // 653\n\t\t\treturn window.cancelAnimationFrame ||                                                                              // 654\n\t\t\t\twindow.webkitCancelAnimationFrame ||                                                                              // 655\n\t\t\t\twindow.mozCancelAnimationFrame ||                                                                                 // 656\n\t\t\t\twindow.oCancelAnimationFrame ||                                                                                   // 657\n\t\t\t\twindow.msCancelAnimationFrame ||                                                                                  // 658\n\t\t\t\tfunction(callback) {                                                                                              // 659\n\t\t\t\t\treturn window.clearTimeout(callback, 1000 / 60);                                                                 // 660\n\t\t\t\t};                                                                                                                // 661\n\t\t})(),                                                                                                               // 662\n\t\tanimationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){\n                                                                                                                      // 664\n\t\t\tvar currentStep = 0,                                                                                               // 665\n\t\t\t\teasingFunction = easingEffects[easingString] || easingEffects.linear;                                             // 666\n                                                                                                                      // 667\n\t\t\tvar animationFrame = function(){                                                                                   // 668\n\t\t\t\tcurrentStep++;                                                                                                    // 669\n\t\t\t\tvar stepDecimal = currentStep/totalSteps;                                                                         // 670\n\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);                                                                    // 671\n                                                                                                                      // 672\n\t\t\t\tcallback.call(chartInstance,easeDecimal,stepDecimal, currentStep);                                                // 673\n\t\t\t\tonProgress.call(chartInstance,easeDecimal,stepDecimal);                                                           // 674\n\t\t\t\tif (currentStep < totalSteps){                                                                                    // 675\n\t\t\t\t\tchartInstance.animationFrame = requestAnimFrame(animationFrame);                                                 // 676\n\t\t\t\t} else{                                                                                                           // 677\n\t\t\t\t\tonComplete.apply(chartInstance);                                                                                 // 678\n\t\t\t\t}                                                                                                                 // 679\n\t\t\t};                                                                                                                 // 680\n\t\t\trequestAnimFrame(animationFrame);                                                                                  // 681\n\t\t},                                                                                                                  // 682\n\t\t//-- DOM methods                                                                                                    // 683\n\t\tgetRelativePosition = helpers.getRelativePosition = function(evt){                                                  // 684\n\t\t\tvar mouseX, mouseY;                                                                                                // 685\n\t\t\tvar e = evt.originalEvent || evt,                                                                                  // 686\n\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,                                                                     // 687\n\t\t\t\tboundingRect = canvas.getBoundingClientRect();                                                                    // 688\n                                                                                                                      // 689\n\t\t\tif (e.touches){                                                                                                    // 690\n\t\t\t\tmouseX = e.touches[0].clientX - boundingRect.left;                                                                // 691\n\t\t\t\tmouseY = e.touches[0].clientY - boundingRect.top;                                                                 // 692\n                                                                                                                      // 693\n\t\t\t}                                                                                                                  // 694\n\t\t\telse{                                                                                                              // 695\n\t\t\t\tmouseX = e.clientX - boundingRect.left;                                                                           // 696\n\t\t\t\tmouseY = e.clientY - boundingRect.top;                                                                            // 697\n\t\t\t}                                                                                                                  // 698\n                                                                                                                      // 699\n\t\t\treturn {                                                                                                           // 700\n\t\t\t\tx : mouseX,                                                                                                       // 701\n\t\t\t\ty : mouseY                                                                                                        // 702\n\t\t\t};                                                                                                                 // 703\n                                                                                                                      // 704\n\t\t},                                                                                                                  // 705\n\t\taddEvent = helpers.addEvent = function(node,eventType,method){                                                      // 706\n\t\t\tif (node.addEventListener){                                                                                        // 707\n\t\t\t\tnode.addEventListener(eventType,method);                                                                          // 708\n\t\t\t} else if (node.attachEvent){                                                                                      // 709\n\t\t\t\tnode.attachEvent(\"on\"+eventType, method);                                                                         // 710\n\t\t\t} else {                                                                                                           // 711\n\t\t\t\tnode[\"on\"+eventType] = method;                                                                                    // 712\n\t\t\t}                                                                                                                  // 713\n\t\t},                                                                                                                  // 714\n\t\tremoveEvent = helpers.removeEvent = function(node, eventType, handler){                                             // 715\n\t\t\tif (node.removeEventListener){                                                                                     // 716\n\t\t\t\tnode.removeEventListener(eventType, handler, false);                                                              // 717\n\t\t\t} else if (node.detachEvent){                                                                                      // 718\n\t\t\t\tnode.detachEvent(\"on\"+eventType,handler);                                                                         // 719\n\t\t\t} else{                                                                                                            // 720\n\t\t\t\tnode[\"on\" + eventType] = noop;                                                                                    // 721\n\t\t\t}                                                                                                                  // 722\n\t\t},                                                                                                                  // 723\n\t\tbindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){                                  // 724\n\t\t\t// Create the events object if it's not already present                                                            // 725\n\t\t\tif (!chartInstance.events) chartInstance.events = {};                                                              // 726\n                                                                                                                      // 727\n\t\t\teach(arrayOfEvents,function(eventName){                                                                            // 728\n\t\t\t\tchartInstance.events[eventName] = function(){                                                                     // 729\n\t\t\t\t\thandler.apply(chartInstance, arguments);                                                                         // 730\n\t\t\t\t};                                                                                                                // 731\n\t\t\t\taddEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);                                   // 732\n\t\t\t});                                                                                                                // 733\n\t\t},                                                                                                                  // 734\n\t\tunbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {                                     // 735\n\t\t\teach(arrayOfEvents, function(handler,eventName){                                                                   // 736\n\t\t\t\tremoveEvent(chartInstance.chart.canvas, eventName, handler);                                                      // 737\n\t\t\t});                                                                                                                // 738\n\t\t},                                                                                                                  // 739\n\t\tgetMaximumWidth = helpers.getMaximumWidth = function(domNode){                                                      // 740\n\t\t\tvar container = domNode.parentNode;                                                                                // 741\n\t\t\t// TODO = check cross browser stuff with this.                                                                     // 742\n\t\t\treturn container.clientWidth;                                                                                      // 743\n\t\t},                                                                                                                  // 744\n\t\tgetMaximumHeight = helpers.getMaximumHeight = function(domNode){                                                    // 745\n\t\t\tvar container = domNode.parentNode;                                                                                // 746\n\t\t\t// TODO = check cross browser stuff with this.                                                                     // 747\n\t\t\treturn container.clientHeight;                                                                                     // 748\n\t\t},                                                                                                                  // 749\n\t\tgetMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support                                // 750\n\t\tretinaScale = helpers.retinaScale = function(chart){                                                                // 751\n\t\t\tvar ctx = chart.ctx,                                                                                               // 752\n\t\t\t\twidth = chart.canvas.width,                                                                                       // 753\n\t\t\t\theight = chart.canvas.height;                                                                                     // 754\n                                                                                                                      // 755\n\t\t\tif (window.devicePixelRatio) {                                                                                     // 756\n\t\t\t\tctx.canvas.style.width = width + \"px\";                                                                            // 757\n\t\t\t\tctx.canvas.style.height = height + \"px\";                                                                          // 758\n\t\t\t\tctx.canvas.height = height * window.devicePixelRatio;                                                             // 759\n\t\t\t\tctx.canvas.width = width * window.devicePixelRatio;                                                               // 760\n\t\t\t\tctx.scale(window.devicePixelRatio, window.devicePixelRatio);                                                      // 761\n\t\t\t}                                                                                                                  // 762\n\t\t},                                                                                                                  // 763\n\t\t//-- Canvas methods                                                                                                 // 764\n\t\tclear = helpers.clear = function(chart){                                                                            // 765\n\t\t\tchart.ctx.clearRect(0,0,chart.width,chart.height);                                                                 // 766\n\t\t},                                                                                                                  // 767\n\t\tfontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){                                         // 768\n\t\t\treturn fontStyle + \" \" + pixelSize+\"px \" + fontFamily;                                                             // 769\n\t\t},                                                                                                                  // 770\n\t\tlongestText = helpers.longestText = function(ctx,font,arrayOfStrings){                                              // 771\n\t\t\tctx.font = font;                                                                                                   // 772\n\t\t\tvar longest = 0;                                                                                                   // 773\n\t\t\teach(arrayOfStrings,function(string){                                                                              // 774\n\t\t\t\tvar textWidth = ctx.measureText(string).width;                                                                    // 775\n\t\t\t\tlongest = (textWidth > longest) ? textWidth : longest;                                                            // 776\n\t\t\t});                                                                                                                // 777\n\t\t\treturn longest;                                                                                                    // 778\n\t\t},                                                                                                                  // 779\n\t\tdrawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){                        // 780\n\t\t\tctx.beginPath();                                                                                                   // 781\n\t\t\tctx.moveTo(x + radius, y);                                                                                         // 782\n\t\t\tctx.lineTo(x + width - radius, y);                                                                                 // 783\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);                                                         // 784\n\t\t\tctx.lineTo(x + width, y + height - radius);                                                                        // 785\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);                                       // 786\n\t\t\tctx.lineTo(x + radius, y + height);                                                                                // 787\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);                                                       // 788\n\t\t\tctx.lineTo(x, y + radius);                                                                                         // 789\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);                                                                         // 790\n\t\t\tctx.closePath();                                                                                                   // 791\n\t\t};                                                                                                                  // 792\n                                                                                                                      // 793\n                                                                                                                      // 794\n\t//Store a reference to each instance - allowing us to globally resize chart instances on window resize.              // 795\n\t//Destroy method on the chart will remove the instance of the chart from this reference.                             // 796\n\tChart.instances = {};                                                                                                // 797\n                                                                                                                      // 798\n\tChart.Type = function(data,options,chart){                                                                           // 799\n\t\tthis.options = options;                                                                                             // 800\n\t\tthis.chart = chart;                                                                                                 // 801\n\t\tthis.id = uid();                                                                                                    // 802\n\t\t//Add the chart instance to the global namespace                                                                    // 803\n\t\tChart.instances[this.id] = this;                                                                                    // 804\n                                                                                                                      // 805\n\t\t// Initialize is always called when a chart type is created                                                         // 806\n\t\t// By default it is a no op, but it should be extended                                                              // 807\n\t\tif (options.responsive){                                                                                            // 808\n\t\t\tthis.resize();                                                                                                     // 809\n\t\t}                                                                                                                   // 810\n\t\tthis.initialize.call(this,data);                                                                                    // 811\n\t};                                                                                                                   // 812\n                                                                                                                      // 813\n\t//Core methods that'll be a part of every chart type                                                                 // 814\n\textend(Chart.Type.prototype,{                                                                                        // 815\n\t\tinitialize : function(){return this;},                                                                              // 816\n\t\tclear : function(){                                                                                                 // 817\n\t\t\tclear(this.chart);                                                                                                 // 818\n\t\t\treturn this;                                                                                                       // 819\n\t\t},                                                                                                                  // 820\n\t\tstop : function(){                                                                                                  // 821\n\t\t\t// Stops any current animation loop occuring                                                                       // 822\n\t\t\thelpers.cancelAnimFrame.call(root, this.animationFrame);                                                           // 823\n\t\t\treturn this;                                                                                                       // 824\n\t\t},                                                                                                                  // 825\n\t\tresize : function(callback){                                                                                        // 826\n\t\t\tthis.stop();                                                                                                       // 827\n\t\t\tvar canvas = this.chart.canvas,                                                                                    // 828\n\t\t\t\tnewWidth = getMaximumWidth(this.chart.canvas),                                                                    // 829\n\t\t\t\tnewHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);\n                                                                                                                      // 831\n\t\t\tcanvas.width = this.chart.width = newWidth;                                                                        // 832\n\t\t\tcanvas.height =  this.chart.height = newHeight;                                                                    // 833\n                                                                                                                      // 834\n\t\t\tretinaScale(this.chart);                                                                                           // 835\n                                                                                                                      // 836\n\t\t\tif (typeof callback === \"function\"){                                                                               // 837\n\t\t\t\tcallback.apply(this, Array.prototype.slice.call(arguments, 1));                                                   // 838\n\t\t\t}                                                                                                                  // 839\n\t\t\treturn this;                                                                                                       // 840\n\t\t},                                                                                                                  // 841\n\t\treflow : noop,                                                                                                      // 842\n\t\trender : function(reflow){                                                                                          // 843\n\t\t\tif (reflow){                                                                                                       // 844\n\t\t\t\tthis.reflow();                                                                                                    // 845\n\t\t\t}                                                                                                                  // 846\n\t\t\tif (this.options.animation && !reflow){                                                                            // 847\n\t\t\t\thelpers.animationLoop(                                                                                            // 848\n\t\t\t\t\tthis.draw,                                                                                                       // 849\n\t\t\t\t\tthis.options.animationSteps,                                                                                     // 850\n\t\t\t\t\tthis.options.animationEasing,                                                                                    // 851\n\t\t\t\t\tthis.options.onAnimationProgress,                                                                                // 852\n\t\t\t\t\tthis.options.onAnimationComplete,                                                                                // 853\n\t\t\t\t\tthis                                                                                                             // 854\n\t\t\t\t);                                                                                                                // 855\n\t\t\t}                                                                                                                  // 856\n\t\t\telse{                                                                                                              // 857\n\t\t\t\tthis.draw();                                                                                                      // 858\n\t\t\t\tthis.options.onAnimationComplete.call(this);                                                                      // 859\n\t\t\t}                                                                                                                  // 860\n\t\t\treturn this;                                                                                                       // 861\n\t\t},                                                                                                                  // 862\n\t\tgenerateLegend : function(){                                                                                        // 863\n\t\t\treturn template(this.options.legendTemplate,this);                                                                 // 864\n\t\t},                                                                                                                  // 865\n\t\tdestroy : function(){                                                                                               // 866\n\t\t\tthis.clear();                                                                                                      // 867\n\t\t\tunbindEvents(this, this.events);                                                                                   // 868\n\t\t\tdelete Chart.instances[this.id];                                                                                   // 869\n\t\t},                                                                                                                  // 870\n\t\tshowTooltip : function(ChartElements, forceRedraw){                                                                 // 871\n\t\t\t// Only redraw the chart if we've actually changed what we're hovering on.                                         // 872\n\t\t\tif (typeof this.activeElements === 'undefined') this.activeElements = [];                                          // 873\n                                                                                                                      // 874\n\t\t\tvar isChanged = (function(Elements){                                                                               // 875\n\t\t\t\tvar changed = false;                                                                                              // 876\n                                                                                                                      // 877\n\t\t\t\tif (Elements.length !== this.activeElements.length){                                                              // 878\n\t\t\t\t\tchanged = true;                                                                                                  // 879\n\t\t\t\t\treturn changed;                                                                                                  // 880\n\t\t\t\t}                                                                                                                 // 881\n                                                                                                                      // 882\n\t\t\t\teach(Elements, function(element, index){                                                                          // 883\n\t\t\t\t\tif (element !== this.activeElements[index]){                                                                     // 884\n\t\t\t\t\t\tchanged = true;                                                                                                 // 885\n\t\t\t\t\t}                                                                                                                // 886\n\t\t\t\t}, this);                                                                                                         // 887\n\t\t\t\treturn changed;                                                                                                   // 888\n\t\t\t}).call(this, ChartElements);                                                                                      // 889\n                                                                                                                      // 890\n\t\t\tif (!isChanged && !forceRedraw){                                                                                   // 891\n\t\t\t\treturn;                                                                                                           // 892\n\t\t\t}                                                                                                                  // 893\n\t\t\telse{                                                                                                              // 894\n\t\t\t\tthis.activeElements = ChartElements;                                                                              // 895\n\t\t\t}                                                                                                                  // 896\n\t\t\tthis.draw();                                                                                                       // 897\n\t\t\tif (ChartElements.length > 0){                                                                                     // 898\n\t\t\t\t// If we have multiple datasets, show a MultiTooltip for all of the data points at that index                     // 899\n\t\t\t\tif (this.datasets && this.datasets.length > 1) {                                                                  // 900\n\t\t\t\t\tvar dataArray,                                                                                                   // 901\n\t\t\t\t\t\tdataIndex;                                                                                                      // 902\n                                                                                                                      // 903\n\t\t\t\t\tfor (var i = this.datasets.length - 1; i >= 0; i--) {                                                            // 904\n\t\t\t\t\t\tdataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;                      // 905\n\t\t\t\t\t\tdataIndex = indexOf(dataArray, ChartElements[0]);                                                               // 906\n\t\t\t\t\t\tif (dataIndex !== -1){                                                                                          // 907\n\t\t\t\t\t\t\tbreak;                                                                                                         // 908\n\t\t\t\t\t\t}                                                                                                               // 909\n\t\t\t\t\t}                                                                                                                // 910\n\t\t\t\t\tvar tooltipLabels = [],                                                                                          // 911\n\t\t\t\t\t\ttooltipColors = [],                                                                                             // 912\n\t\t\t\t\t\tmedianPosition = (function(index) {                                                                             // 913\n                                                                                                                      // 914\n\t\t\t\t\t\t\t// Get all the points at that particular index                                                                 // 915\n\t\t\t\t\t\t\tvar Elements = [],                                                                                             // 916\n\t\t\t\t\t\t\t\tdataCollection,                                                                                               // 917\n\t\t\t\t\t\t\t\txPositions = [],                                                                                              // 918\n\t\t\t\t\t\t\t\tyPositions = [],                                                                                              // 919\n\t\t\t\t\t\t\t\txMax,                                                                                                         // 920\n\t\t\t\t\t\t\t\tyMax,                                                                                                         // 921\n\t\t\t\t\t\t\t\txMin,                                                                                                         // 922\n\t\t\t\t\t\t\t\tyMin;                                                                                                         // 923\n\t\t\t\t\t\t\thelpers.each(this.datasets, function(dataset){                                                                 // 924\n\t\t\t\t\t\t\t\tdataCollection = dataset.points || dataset.bars || dataset.segments;                                          // 925\n\t\t\t\t\t\t\t\tif (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){                                       // 926\n\t\t\t\t\t\t\t\t\tElements.push(dataCollection[dataIndex]);                                                                    // 927\n\t\t\t\t\t\t\t\t}                                                                                                             // 928\n\t\t\t\t\t\t\t});                                                                                                            // 929\n                                                                                                                      // 930\n\t\t\t\t\t\t\thelpers.each(Elements, function(element) {                                                                     // 931\n\t\t\t\t\t\t\t\txPositions.push(element.x);                                                                                   // 932\n\t\t\t\t\t\t\t\tyPositions.push(element.y);                                                                                   // 933\n                                                                                                                      // 934\n                                                                                                                      // 935\n\t\t\t\t\t\t\t\t//Include any colour information about the element                                                            // 936\n\t\t\t\t\t\t\t\ttooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));                             // 937\n\t\t\t\t\t\t\t\ttooltipColors.push({                                                                                          // 938\n\t\t\t\t\t\t\t\t\tfill: element._saved.fillColor || element.fillColor,                                                         // 939\n\t\t\t\t\t\t\t\t\tstroke: element._saved.strokeColor || element.strokeColor                                                    // 940\n\t\t\t\t\t\t\t\t});                                                                                                           // 941\n                                                                                                                      // 942\n\t\t\t\t\t\t\t}, this);                                                                                                      // 943\n                                                                                                                      // 944\n\t\t\t\t\t\t\tyMin = min(yPositions);                                                                                        // 945\n\t\t\t\t\t\t\tyMax = max(yPositions);                                                                                        // 946\n                                                                                                                      // 947\n\t\t\t\t\t\t\txMin = min(xPositions);                                                                                        // 948\n\t\t\t\t\t\t\txMax = max(xPositions);                                                                                        // 949\n                                                                                                                      // 950\n\t\t\t\t\t\t\treturn {                                                                                                       // 951\n\t\t\t\t\t\t\t\tx: (xMin > this.chart.width/2) ? xMin : xMax,                                                                 // 952\n\t\t\t\t\t\t\t\ty: (yMin + yMax)/2                                                                                            // 953\n\t\t\t\t\t\t\t};                                                                                                             // 954\n\t\t\t\t\t\t}).call(this, dataIndex);                                                                                       // 955\n                                                                                                                      // 956\n\t\t\t\t\tnew Chart.MultiTooltip({                                                                                         // 957\n\t\t\t\t\t\tx: medianPosition.x,                                                                                            // 958\n\t\t\t\t\t\ty: medianPosition.y,                                                                                            // 959\n\t\t\t\t\t\txPadding: this.options.tooltipXPadding,                                                                         // 960\n\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,                                                                         // 961\n\t\t\t\t\t\txOffset: this.options.tooltipXOffset,                                                                           // 962\n\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,                                                                       // 963\n\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,                                                                       // 964\n\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,                                                                     // 965\n\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,                                                                       // 966\n\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,                                                                         // 967\n\t\t\t\t\t\ttitleTextColor: this.options.tooltipTitleFontColor,                                                             // 968\n\t\t\t\t\t\ttitleFontFamily: this.options.tooltipTitleFontFamily,                                                           // 969\n\t\t\t\t\t\ttitleFontStyle: this.options.tooltipTitleFontStyle,                                                             // 970\n\t\t\t\t\t\ttitleFontSize: this.options.tooltipTitleFontSize,                                                               // 971\n\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,                                                                 // 972\n\t\t\t\t\t\tlabels: tooltipLabels,                                                                                          // 973\n\t\t\t\t\t\tlegendColors: tooltipColors,                                                                                    // 974\n\t\t\t\t\t\tlegendColorBackground : this.options.multiTooltipKeyBackground,                                                 // 975\n\t\t\t\t\t\ttitle: ChartElements[0].label,                                                                                  // 976\n\t\t\t\t\t\tchart: this.chart,                                                                                              // 977\n\t\t\t\t\t\tctx: this.chart.ctx                                                                                             // 978\n\t\t\t\t\t}).draw();                                                                                                       // 979\n                                                                                                                      // 980\n\t\t\t\t} else {                                                                                                          // 981\n\t\t\t\t\teach(ChartElements, function(Element) {                                                                          // 982\n\t\t\t\t\t\tvar tooltipPosition = Element.tooltipPosition();                                                                // 983\n\t\t\t\t\t\tnew Chart.Tooltip({                                                                                             // 984\n\t\t\t\t\t\t\tx: Math.round(tooltipPosition.x),                                                                              // 985\n\t\t\t\t\t\t\ty: Math.round(tooltipPosition.y),                                                                              // 986\n\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,                                                                        // 987\n\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,                                                                        // 988\n\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,                                                                      // 989\n\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,                                                                      // 990\n\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,                                                                    // 991\n\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,                                                                      // 992\n\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,                                                                        // 993\n\t\t\t\t\t\t\tcaretHeight: this.options.tooltipCaretSize,                                                                    // 994\n\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,                                                                // 995\n\t\t\t\t\t\t\ttext: template(this.options.tooltipTemplate, Element),                                                         // 996\n\t\t\t\t\t\t\tchart: this.chart                                                                                              // 997\n\t\t\t\t\t\t}).draw();                                                                                                      // 998\n\t\t\t\t\t}, this);                                                                                                        // 999\n\t\t\t\t}                                                                                                                 // 1000\n\t\t\t}                                                                                                                  // 1001\n\t\t\treturn this;                                                                                                       // 1002\n\t\t},                                                                                                                  // 1003\n\t\ttoBase64Image : function(){                                                                                         // 1004\n\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);                                            // 1005\n\t\t}                                                                                                                   // 1006\n\t});                                                                                                                  // 1007\n                                                                                                                      // 1008\n\tChart.Type.extend = function(extensions){                                                                            // 1009\n                                                                                                                      // 1010\n\t\tvar parent = this;                                                                                                  // 1011\n                                                                                                                      // 1012\n\t\tvar ChartType = function(){                                                                                         // 1013\n\t\t\treturn parent.apply(this,arguments);                                                                               // 1014\n\t\t};                                                                                                                  // 1015\n                                                                                                                      // 1016\n\t\t//Copy the prototype object of the this class                                                                       // 1017\n\t\tChartType.prototype = clone(parent.prototype);                                                                      // 1018\n\t\t//Now overwrite some of the properties in the base class with the new extensions                                    // 1019\n\t\textend(ChartType.prototype, extensions);                                                                            // 1020\n                                                                                                                      // 1021\n\t\tChartType.extend = Chart.Type.extend;                                                                               // 1022\n                                                                                                                      // 1023\n\t\tif (extensions.name || parent.prototype.name){                                                                      // 1024\n                                                                                                                      // 1025\n\t\t\tvar chartName = extensions.name || parent.prototype.name;                                                          // 1026\n\t\t\t//Assign any potential default values of the new chart type                                                        // 1027\n                                                                                                                      // 1028\n\t\t\t//If none are defined, we'll use a clone of the chart type this is being extended from.                            // 1029\n\t\t\t//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart                      // 1030\n\t\t\t//doesn't define some defaults of their own.                                                                       // 1031\n                                                                                                                      // 1032\n\t\t\tvar baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};    // 1033\n                                                                                                                      // 1034\n\t\t\tChart.defaults[chartName] = extend(baseDefaults,extensions.defaults);                                              // 1035\n                                                                                                                      // 1036\n\t\t\tChart.types[chartName] = ChartType;                                                                                // 1037\n                                                                                                                      // 1038\n\t\t\t//Register this new chart type in the Chart prototype                                                              // 1039\n\t\t\tChart.prototype[chartName] = function(data,options){                                                               // 1040\n\t\t\t\tvar config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});                              // 1041\n\t\t\t\treturn new ChartType(data,config,this);                                                                           // 1042\n\t\t\t};                                                                                                                 // 1043\n\t\t} else{                                                                                                             // 1044\n\t\t\twarn(\"Name not provided for this chart, so it hasn't been registered\");                                            // 1045\n\t\t}                                                                                                                   // 1046\n\t\treturn parent;                                                                                                      // 1047\n\t};                                                                                                                   // 1048\n                                                                                                                      // 1049\n\tChart.Element = function(configuration){                                                                             // 1050\n\t\textend(this,configuration);                                                                                         // 1051\n\t\tthis.initialize.apply(this,arguments);                                                                              // 1052\n\t\tthis.save();                                                                                                        // 1053\n\t};                                                                                                                   // 1054\n\textend(Chart.Element.prototype,{                                                                                     // 1055\n\t\tinitialize : function(){},                                                                                          // 1056\n\t\trestore : function(props){                                                                                          // 1057\n\t\t\tif (!props){                                                                                                       // 1058\n\t\t\t\textend(this,this._saved);                                                                                         // 1059\n\t\t\t} else {                                                                                                           // 1060\n\t\t\t\teach(props,function(key){                                                                                         // 1061\n\t\t\t\t\tthis[key] = this._saved[key];                                                                                    // 1062\n\t\t\t\t},this);                                                                                                          // 1063\n\t\t\t}                                                                                                                  // 1064\n\t\t\treturn this;                                                                                                       // 1065\n\t\t},                                                                                                                  // 1066\n\t\tsave : function(){                                                                                                  // 1067\n\t\t\tthis._saved = clone(this);                                                                                         // 1068\n\t\t\tdelete this._saved._saved;                                                                                         // 1069\n\t\t\treturn this;                                                                                                       // 1070\n\t\t},                                                                                                                  // 1071\n\t\tupdate : function(newProps){                                                                                        // 1072\n\t\t\teach(newProps,function(value,key){                                                                                 // 1073\n\t\t\t\tthis._saved[key] = this[key];                                                                                     // 1074\n\t\t\t\tthis[key] = value;                                                                                                // 1075\n\t\t\t},this);                                                                                                           // 1076\n\t\t\treturn this;                                                                                                       // 1077\n\t\t},                                                                                                                  // 1078\n\t\ttransition : function(props,ease){                                                                                  // 1079\n\t\t\teach(props,function(value,key){                                                                                    // 1080\n\t\t\t\tthis[key] = ((value - this._saved[key]) * ease) + this._saved[key];                                               // 1081\n\t\t\t},this);                                                                                                           // 1082\n\t\t\treturn this;                                                                                                       // 1083\n\t\t},                                                                                                                  // 1084\n\t\ttooltipPosition : function(){                                                                                       // 1085\n\t\t\treturn {                                                                                                           // 1086\n\t\t\t\tx : this.x,                                                                                                       // 1087\n\t\t\t\ty : this.y                                                                                                        // 1088\n\t\t\t};                                                                                                                 // 1089\n\t\t},                                                                                                                  // 1090\n\t\thasValue: function(){                                                                                               // 1091\n\t\t\treturn isNumber(this.value);                                                                                       // 1092\n\t\t}                                                                                                                   // 1093\n\t});                                                                                                                  // 1094\n                                                                                                                      // 1095\n\tChart.Element.extend = inherits;                                                                                     // 1096\n                                                                                                                      // 1097\n                                                                                                                      // 1098\n\tChart.Point = Chart.Element.extend({                                                                                 // 1099\n\t\tdisplay: true,                                                                                                      // 1100\n\t\tinRange: function(chartX,chartY){                                                                                   // 1101\n\t\t\tvar hitDetectionRange = this.hitDetectionRadius + this.radius;                                                     // 1102\n\t\t\treturn ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));                  // 1103\n\t\t},                                                                                                                  // 1104\n\t\tdraw : function(){                                                                                                  // 1105\n\t\t\tif (this.display){                                                                                                 // 1106\n\t\t\t\tvar ctx = this.ctx;                                                                                               // 1107\n\t\t\t\tctx.beginPath();                                                                                                  // 1108\n                                                                                                                      // 1109\n\t\t\t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);                                                               // 1110\n\t\t\t\tctx.closePath();                                                                                                  // 1111\n                                                                                                                      // 1112\n\t\t\t\tctx.strokeStyle = this.strokeColor;                                                                               // 1113\n\t\t\t\tctx.lineWidth = this.strokeWidth;                                                                                 // 1114\n                                                                                                                      // 1115\n\t\t\t\tctx.fillStyle = this.fillColor;                                                                                   // 1116\n                                                                                                                      // 1117\n\t\t\t\tctx.fill();                                                                                                       // 1118\n\t\t\t\tctx.stroke();                                                                                                     // 1119\n\t\t\t}                                                                                                                  // 1120\n                                                                                                                      // 1121\n                                                                                                                      // 1122\n\t\t\t//Quick debug for bezier curve splining                                                                            // 1123\n\t\t\t//Highlights control points and the line between them.                                                             // 1124\n\t\t\t//Handy for dev - stripped in the min version.                                                                     // 1125\n                                                                                                                      // 1126\n\t\t\t// ctx.save();                                                                                                     // 1127\n\t\t\t// ctx.fillStyle = \"black\";                                                                                        // 1128\n\t\t\t// ctx.strokeStyle = \"black\"                                                                                       // 1129\n\t\t\t// ctx.beginPath();                                                                                                // 1130\n\t\t\t// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);                                // 1131\n\t\t\t// ctx.fill();                                                                                                     // 1132\n                                                                                                                      // 1133\n\t\t\t// ctx.beginPath();                                                                                                // 1134\n\t\t\t// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);                                // 1135\n\t\t\t// ctx.fill();                                                                                                     // 1136\n                                                                                                                      // 1137\n\t\t\t// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);                                              // 1138\n\t\t\t// ctx.lineTo(this.x, this.y);                                                                                     // 1139\n\t\t\t// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);                                              // 1140\n\t\t\t// ctx.stroke();                                                                                                   // 1141\n                                                                                                                      // 1142\n\t\t\t// ctx.restore();                                                                                                  // 1143\n                                                                                                                      // 1144\n                                                                                                                      // 1145\n                                                                                                                      // 1146\n\t\t}                                                                                                                   // 1147\n\t});                                                                                                                  // 1148\n                                                                                                                      // 1149\n\tChart.Arc = Chart.Element.extend({                                                                                   // 1150\n\t\tinRange : function(chartX,chartY){                                                                                  // 1151\n                                                                                                                      // 1152\n\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(this, {                                                      // 1153\n\t\t\t\tx: chartX,                                                                                                        // 1154\n\t\t\t\ty: chartY                                                                                                         // 1155\n\t\t\t});                                                                                                                // 1156\n                                                                                                                      // 1157\n\t\t\t//Check if within the range of the open/close angle                                                                // 1158\n\t\t\tvar betweenAngles = (pointRelativePosition.angle >= this.startAngle && pointRelativePosition.angle <= this.endAngle),\n\t\t\t\twithinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);\n                                                                                                                      // 1161\n\t\t\treturn (betweenAngles && withinRadius);                                                                            // 1162\n\t\t\t//Ensure within the outside of the arc centre, but inside arc outer                                                // 1163\n\t\t},                                                                                                                  // 1164\n\t\ttooltipPosition : function(){                                                                                       // 1165\n\t\t\tvar centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),                                       // 1166\n\t\t\t\trangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;                                   // 1167\n\t\t\treturn {                                                                                                           // 1168\n\t\t\t\tx : this.x + (Math.cos(centreAngle) * rangeFromCentre),                                                           // 1169\n\t\t\t\ty : this.y + (Math.sin(centreAngle) * rangeFromCentre)                                                            // 1170\n\t\t\t};                                                                                                                 // 1171\n\t\t},                                                                                                                  // 1172\n\t\tdraw : function(animationPercent){                                                                                  // 1173\n                                                                                                                      // 1174\n\t\t\tvar easingDecimal = animationPercent || 1;                                                                         // 1175\n                                                                                                                      // 1176\n\t\t\tvar ctx = this.ctx;                                                                                                // 1177\n                                                                                                                      // 1178\n\t\t\tctx.beginPath();                                                                                                   // 1179\n                                                                                                                      // 1180\n\t\t\tctx.arc(this.x, this.y, this.outerRadius, this.startAngle, this.endAngle);                                         // 1181\n                                                                                                                      // 1182\n\t\t\tctx.arc(this.x, this.y, this.innerRadius, this.endAngle, this.startAngle, true);                                   // 1183\n                                                                                                                      // 1184\n\t\t\tctx.closePath();                                                                                                   // 1185\n\t\t\tctx.strokeStyle = this.strokeColor;                                                                                // 1186\n\t\t\tctx.lineWidth = this.strokeWidth;                                                                                  // 1187\n                                                                                                                      // 1188\n\t\t\tctx.fillStyle = this.fillColor;                                                                                    // 1189\n                                                                                                                      // 1190\n\t\t\tctx.fill();                                                                                                        // 1191\n\t\t\tctx.lineJoin = 'bevel';                                                                                            // 1192\n                                                                                                                      // 1193\n\t\t\tif (this.showStroke){                                                                                              // 1194\n\t\t\t\tctx.stroke();                                                                                                     // 1195\n\t\t\t}                                                                                                                  // 1196\n\t\t}                                                                                                                   // 1197\n\t});                                                                                                                  // 1198\n                                                                                                                      // 1199\n\tChart.Rectangle = Chart.Element.extend({                                                                             // 1200\n\t\tdraw : function(){                                                                                                  // 1201\n\t\t\tvar ctx = this.ctx,                                                                                                // 1202\n\t\t\t\thalfWidth = this.width/2,                                                                                         // 1203\n\t\t\t\tleftX = this.x - halfWidth,                                                                                       // 1204\n\t\t\t\trightX = this.x + halfWidth,                                                                                      // 1205\n\t\t\t\ttop = this.base - (this.base - this.y),                                                                           // 1206\n\t\t\t\thalfStroke = this.strokeWidth / 2;                                                                                // 1207\n                                                                                                                      // 1208\n\t\t\t// Canvas doesn't allow us to stroke inside the width so we can                                                    // 1209\n\t\t\t// adjust the sizes to fit if we're setting a stroke on the line                                                   // 1210\n\t\t\tif (this.showStroke){                                                                                              // 1211\n\t\t\t\tleftX += halfStroke;                                                                                              // 1212\n\t\t\t\trightX -= halfStroke;                                                                                             // 1213\n\t\t\t\ttop += halfStroke;                                                                                                // 1214\n\t\t\t}                                                                                                                  // 1215\n                                                                                                                      // 1216\n\t\t\tctx.beginPath();                                                                                                   // 1217\n                                                                                                                      // 1218\n\t\t\tctx.fillStyle = this.fillColor;                                                                                    // 1219\n\t\t\tctx.strokeStyle = this.strokeColor;                                                                                // 1220\n\t\t\tctx.lineWidth = this.strokeWidth;                                                                                  // 1221\n                                                                                                                      // 1222\n\t\t\t// It'd be nice to keep this class totally generic to any rectangle                                                // 1223\n\t\t\t// and simply specify which border to miss out.                                                                    // 1224\n\t\t\tctx.moveTo(leftX, this.base);                                                                                      // 1225\n\t\t\tctx.lineTo(leftX, top);                                                                                            // 1226\n\t\t\tctx.lineTo(rightX, top);                                                                                           // 1227\n\t\t\tctx.lineTo(rightX, this.base);                                                                                     // 1228\n\t\t\tctx.fill();                                                                                                        // 1229\n\t\t\tif (this.showStroke){                                                                                              // 1230\n\t\t\t\tctx.stroke();                                                                                                     // 1231\n\t\t\t}                                                                                                                  // 1232\n\t\t},                                                                                                                  // 1233\n\t\theight : function(){                                                                                                // 1234\n\t\t\treturn this.base - this.y;                                                                                         // 1235\n\t\t},                                                                                                                  // 1236\n\t\tinRange : function(chartX,chartY){                                                                                  // 1237\n\t\t\treturn (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);\n\t\t}                                                                                                                   // 1239\n\t});                                                                                                                  // 1240\n                                                                                                                      // 1241\n\tChart.Tooltip = Chart.Element.extend({                                                                               // 1242\n\t\tdraw : function(){                                                                                                  // 1243\n                                                                                                                      // 1244\n\t\t\tvar ctx = this.chart.ctx;                                                                                          // 1245\n                                                                                                                      // 1246\n\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);                                               // 1247\n                                                                                                                      // 1248\n\t\t\tthis.xAlign = \"center\";                                                                                            // 1249\n\t\t\tthis.yAlign = \"above\";                                                                                             // 1250\n                                                                                                                      // 1251\n\t\t\t//Distance between the actual element.y position and the start of the tooltip caret                                // 1252\n\t\t\tvar caretPadding = 2;                                                                                              // 1253\n                                                                                                                      // 1254\n\t\t\tvar tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,                                             // 1255\n\t\t\t\ttooltipRectHeight = this.fontSize + 2*this.yPadding,                                                              // 1256\n\t\t\t\ttooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;                                              // 1257\n                                                                                                                      // 1258\n\t\t\tif (this.x + tooltipWidth/2 >this.chart.width){                                                                    // 1259\n\t\t\t\tthis.xAlign = \"left\";                                                                                             // 1260\n\t\t\t} else if (this.x - tooltipWidth/2 < 0){                                                                           // 1261\n\t\t\t\tthis.xAlign = \"right\";                                                                                            // 1262\n\t\t\t}                                                                                                                  // 1263\n                                                                                                                      // 1264\n\t\t\tif (this.y - tooltipHeight < 0){                                                                                   // 1265\n\t\t\t\tthis.yAlign = \"below\";                                                                                            // 1266\n\t\t\t}                                                                                                                  // 1267\n                                                                                                                      // 1268\n                                                                                                                      // 1269\n\t\t\tvar tooltipX = this.x - tooltipWidth/2,                                                                            // 1270\n\t\t\t\ttooltipY = this.y - tooltipHeight;                                                                                // 1271\n                                                                                                                      // 1272\n\t\t\tctx.fillStyle = this.fillColor;                                                                                    // 1273\n                                                                                                                      // 1274\n\t\t\tswitch(this.yAlign)                                                                                                // 1275\n\t\t\t{                                                                                                                  // 1276\n\t\t\tcase \"above\":                                                                                                      // 1277\n\t\t\t\t//Draw a caret above the x/y                                                                                      // 1278\n\t\t\t\tctx.beginPath();                                                                                                  // 1279\n\t\t\t\tctx.moveTo(this.x,this.y - caretPadding);                                                                         // 1280\n\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));                                // 1281\n\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));                                // 1282\n\t\t\t\tctx.closePath();                                                                                                  // 1283\n\t\t\t\tctx.fill();                                                                                                       // 1284\n\t\t\t\tbreak;                                                                                                            // 1285\n\t\t\tcase \"below\":                                                                                                      // 1286\n\t\t\t\ttooltipY = this.y + caretPadding + this.caretHeight;                                                              // 1287\n\t\t\t\t//Draw a caret below the x/y                                                                                      // 1288\n\t\t\t\tctx.beginPath();                                                                                                  // 1289\n\t\t\t\tctx.moveTo(this.x, this.y + caretPadding);                                                                        // 1290\n\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);                                  // 1291\n\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);                                  // 1292\n\t\t\t\tctx.closePath();                                                                                                  // 1293\n\t\t\t\tctx.fill();                                                                                                       // 1294\n\t\t\t\tbreak;                                                                                                            // 1295\n\t\t\t}                                                                                                                  // 1296\n                                                                                                                      // 1297\n\t\t\tswitch(this.xAlign)                                                                                                // 1298\n\t\t\t{                                                                                                                  // 1299\n\t\t\tcase \"left\":                                                                                                       // 1300\n\t\t\t\ttooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);                                        // 1301\n\t\t\t\tbreak;                                                                                                            // 1302\n\t\t\tcase \"right\":                                                                                                      // 1303\n\t\t\t\ttooltipX = this.x - (this.cornerRadius + this.caretHeight);                                                       // 1304\n\t\t\t\tbreak;                                                                                                            // 1305\n\t\t\t}                                                                                                                  // 1306\n                                                                                                                      // 1307\n\t\t\tdrawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);                      // 1308\n                                                                                                                      // 1309\n\t\t\tctx.fill();                                                                                                        // 1310\n                                                                                                                      // 1311\n\t\t\tctx.fillStyle = this.textColor;                                                                                    // 1312\n\t\t\tctx.textAlign = \"center\";                                                                                          // 1313\n\t\t\tctx.textBaseline = \"middle\";                                                                                       // 1314\n\t\t\tctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);                                // 1315\n\t\t}                                                                                                                   // 1316\n\t});                                                                                                                  // 1317\n                                                                                                                      // 1318\n\tChart.MultiTooltip = Chart.Element.extend({                                                                          // 1319\n\t\tinitialize : function(){                                                                                            // 1320\n\t\t\tthis.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);                                              // 1321\n                                                                                                                      // 1322\n\t\t\tthis.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);                          // 1323\n                                                                                                                      // 1324\n\t\t\tthis.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleFontSize *1.5;\n                                                                                                                      // 1326\n\t\t\tthis.ctx.font = this.titleFont;                                                                                    // 1327\n                                                                                                                      // 1328\n\t\t\tvar titleWidth = this.ctx.measureText(this.title).width,                                                           // 1329\n\t\t\t\t//Label has a legend square as well so account for this.                                                          // 1330\n\t\t\t\tlabelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,                                     // 1331\n\t\t\t\tlongestTextWidth = max([labelWidth,titleWidth]);                                                                  // 1332\n                                                                                                                      // 1333\n\t\t\tthis.width = longestTextWidth + (this.xPadding*2);                                                                 // 1334\n                                                                                                                      // 1335\n                                                                                                                      // 1336\n\t\t\tvar halfHeight = this.height/2;                                                                                    // 1337\n                                                                                                                      // 1338\n\t\t\t//Check to ensure the height will fit on the canvas                                                                // 1339\n\t\t\t//The three is to buffer form the very                                                                             // 1340\n\t\t\tif (this.y - halfHeight < 0 ){                                                                                     // 1341\n\t\t\t\tthis.y = halfHeight;                                                                                              // 1342\n\t\t\t} else if (this.y + halfHeight > this.chart.height){                                                               // 1343\n\t\t\t\tthis.y = this.chart.height - halfHeight;                                                                          // 1344\n\t\t\t}                                                                                                                  // 1345\n                                                                                                                      // 1346\n\t\t\t//Decide whether to align left or right based on position on canvas                                                // 1347\n\t\t\tif (this.x > this.chart.width/2){                                                                                  // 1348\n\t\t\t\tthis.x -= this.xOffset + this.width;                                                                              // 1349\n\t\t\t} else {                                                                                                           // 1350\n\t\t\t\tthis.x += this.xOffset;                                                                                           // 1351\n\t\t\t}                                                                                                                  // 1352\n                                                                                                                      // 1353\n                                                                                                                      // 1354\n\t\t},                                                                                                                  // 1355\n\t\tgetLineHeight : function(index){                                                                                    // 1356\n\t\t\tvar baseLineHeight = this.y - (this.height/2) + this.yPadding,                                                     // 1357\n\t\t\t\tafterTitleIndex = index-1;                                                                                        // 1358\n                                                                                                                      // 1359\n\t\t\t//If the index is zero, we're getting the title                                                                    // 1360\n\t\t\tif (index === 0){                                                                                                  // 1361\n\t\t\t\treturn baseLineHeight + this.titleFontSize/2;                                                                     // 1362\n\t\t\t} else{                                                                                                            // 1363\n\t\t\t\treturn baseLineHeight + ((this.fontSize*1.5*afterTitleIndex) + this.fontSize/2) + this.titleFontSize * 1.5;       // 1364\n\t\t\t}                                                                                                                  // 1365\n                                                                                                                      // 1366\n\t\t},                                                                                                                  // 1367\n\t\tdraw : function(){                                                                                                  // 1368\n\t\t\tdrawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);             // 1369\n\t\t\tvar ctx = this.ctx;                                                                                                // 1370\n\t\t\tctx.fillStyle = this.fillColor;                                                                                    // 1371\n\t\t\tctx.fill();                                                                                                        // 1372\n\t\t\tctx.closePath();                                                                                                   // 1373\n                                                                                                                      // 1374\n\t\t\tctx.textAlign = \"left\";                                                                                            // 1375\n\t\t\tctx.textBaseline = \"middle\";                                                                                       // 1376\n\t\t\tctx.fillStyle = this.titleTextColor;                                                                               // 1377\n\t\t\tctx.font = this.titleFont;                                                                                         // 1378\n                                                                                                                      // 1379\n\t\t\tctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));                                            // 1380\n                                                                                                                      // 1381\n\t\t\tctx.font = this.font;                                                                                              // 1382\n\t\t\thelpers.each(this.labels,function(label,index){                                                                    // 1383\n\t\t\t\tctx.fillStyle = this.textColor;                                                                                   // 1384\n\t\t\t\tctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));                    // 1385\n                                                                                                                      // 1386\n\t\t\t\t//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)                // 1387\n\t\t\t\t//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\t\t\t//Instead we'll make a white filled block to put the legendColour palette over.                                   // 1389\n                                                                                                                      // 1390\n\t\t\t\tctx.fillStyle = this.legendColorBackground;                                                                       // 1391\n\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n                                                                                                                      // 1393\n\t\t\t\tctx.fillStyle = this.legendColors[index].fill;                                                                    // 1394\n\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n                                                                                                                      // 1396\n                                                                                                                      // 1397\n\t\t\t},this);                                                                                                           // 1398\n\t\t}                                                                                                                   // 1399\n\t});                                                                                                                  // 1400\n                                                                                                                      // 1401\n\tChart.Scale = Chart.Element.extend({                                                                                 // 1402\n\t\tinitialize : function(){                                                                                            // 1403\n\t\t\tthis.fit();                                                                                                        // 1404\n\t\t},                                                                                                                  // 1405\n\t\tbuildYLabels : function(){                                                                                          // 1406\n\t\t\tthis.yLabels = [];                                                                                                 // 1407\n                                                                                                                      // 1408\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);                                                          // 1409\n                                                                                                                      // 1410\n\t\t\tfor (var i=0; i<=this.steps; i++){                                                                                 // 1411\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}                                                                                                                  // 1413\n\t\t\tthis.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) : 0;           // 1414\n\t\t},                                                                                                                  // 1415\n\t\taddXLabel : function(label){                                                                                        // 1416\n\t\t\tthis.xLabels.push(label);                                                                                          // 1417\n\t\t\tthis.valuesCount++;                                                                                                // 1418\n\t\t\tthis.fit();                                                                                                        // 1419\n\t\t},                                                                                                                  // 1420\n\t\tremoveXLabel : function(){                                                                                          // 1421\n\t\t\tthis.xLabels.shift();                                                                                              // 1422\n\t\t\tthis.valuesCount--;                                                                                                // 1423\n\t\t\tthis.fit();                                                                                                        // 1424\n\t\t},                                                                                                                  // 1425\n\t\t// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use       // 1426\n\t\tfit: function(){                                                                                                    // 1427\n\t\t\t// First we need the width of the yLabels, assuming the xLabels aren't rotated                                     // 1428\n                                                                                                                      // 1429\n\t\t\t// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation        // 1430\n\t\t\tthis.startPoint = (this.display) ? this.fontSize : 0;                                                              // 1431\n\t\t\tthis.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels        // 1432\n                                                                                                                      // 1433\n\t\t\t// Apply padding settings to the start and end point.                                                              // 1434\n\t\t\tthis.startPoint += this.padding;                                                                                   // 1435\n\t\t\tthis.endPoint -= this.padding;                                                                                     // 1436\n                                                                                                                      // 1437\n\t\t\t// Cache the starting height, so can determine if we need to recalculate the scale yAxis                           // 1438\n\t\t\tvar cachedHeight = this.endPoint - this.startPoint,                                                                // 1439\n\t\t\t\tcachedYLabelWidth;                                                                                                // 1440\n                                                                                                                      // 1441\n\t\t\t// Build the current yLabels so we have an idea of what size they'll be to start                                   // 1442\n\t\t\t/*                                                                                                                 // 1443\n\t\t\t *\tThis sets what is returned from calculateScaleRange as static properties of this class:                         // 1444\n\t\t\t *                                                                                                                 // 1445\n\t\t\t\tthis.steps;                                                                                                       // 1446\n\t\t\t\tthis.stepValue;                                                                                                   // 1447\n\t\t\t\tthis.min;                                                                                                         // 1448\n\t\t\t\tthis.max;                                                                                                         // 1449\n\t\t\t *                                                                                                                 // 1450\n\t\t\t */                                                                                                                // 1451\n\t\t\tthis.calculateYRange(cachedHeight);                                                                                // 1452\n                                                                                                                      // 1453\n\t\t\t// With these properties set we can now build the array of yLabels                                                 // 1454\n\t\t\t// and also the width of the largest yLabel                                                                        // 1455\n\t\t\tthis.buildYLabels();                                                                                               // 1456\n                                                                                                                      // 1457\n\t\t\tthis.calculateXLabelRotation();                                                                                    // 1458\n                                                                                                                      // 1459\n\t\t\twhile((cachedHeight > this.endPoint - this.startPoint)){                                                           // 1460\n\t\t\t\tcachedHeight = this.endPoint - this.startPoint;                                                                   // 1461\n\t\t\t\tcachedYLabelWidth = this.yLabelWidth;                                                                             // 1462\n                                                                                                                      // 1463\n\t\t\t\tthis.calculateYRange(cachedHeight);                                                                               // 1464\n\t\t\t\tthis.buildYLabels();                                                                                              // 1465\n                                                                                                                      // 1466\n\t\t\t\t// Only go through the xLabel loop again if the yLabel width has changed                                          // 1467\n\t\t\t\tif (cachedYLabelWidth < this.yLabelWidth){                                                                        // 1468\n\t\t\t\t\tthis.calculateXLabelRotation();                                                                                  // 1469\n\t\t\t\t}                                                                                                                 // 1470\n\t\t\t}                                                                                                                  // 1471\n                                                                                                                      // 1472\n\t\t},                                                                                                                  // 1473\n\t\tcalculateXLabelRotation : function(){                                                                               // 1474\n\t\t\t//Get the width of each grid by calculating the difference                                                         // 1475\n\t\t\t//between x offsets between 0 and 1.                                                                               // 1476\n                                                                                                                      // 1477\n\t\t\tthis.ctx.font = this.font;                                                                                         // 1478\n                                                                                                                      // 1479\n\t\t\tvar firstWidth = this.ctx.measureText(this.xLabels[0]).width,                                                      // 1480\n\t\t\t\tlastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,                                    // 1481\n\t\t\t\tfirstRotated,                                                                                                     // 1482\n\t\t\t\tlastRotated;                                                                                                      // 1483\n                                                                                                                      // 1484\n                                                                                                                      // 1485\n\t\t\tthis.xScalePaddingRight = lastWidth/2 + 3;                                                                         // 1486\n\t\t\tthis.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth + 10) ? firstWidth/2 : this.yLabelWidth + 10;            // 1487\n                                                                                                                      // 1488\n\t\t\tthis.xLabelRotation = 0;                                                                                           // 1489\n\t\t\tif (this.display){                                                                                                 // 1490\n\t\t\t\tvar originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),                                            // 1491\n\t\t\t\t\tcosRotation,                                                                                                     // 1492\n\t\t\t\t\tfirstRotatedWidth;                                                                                               // 1493\n\t\t\t\tthis.xLabelWidth = originalLabelWidth;                                                                            // 1494\n\t\t\t\t//Allow 3 pixels x2 padding either side for label readability                                                     // 1495\n\t\t\t\tvar xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;                                         // 1496\n                                                                                                                      // 1497\n\t\t\t\t//Max label rotate should be 90 - also act as a loop counter                                                      // 1498\n\t\t\t\twhile ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){\n\t\t\t\t\tcosRotation = Math.cos(toRadians(this.xLabelRotation));                                                          // 1500\n                                                                                                                      // 1501\n\t\t\t\t\tfirstRotated = cosRotation * firstWidth;                                                                         // 1502\n\t\t\t\t\tlastRotated = cosRotation * lastWidth;                                                                           // 1503\n                                                                                                                      // 1504\n\t\t\t\t\t// We're right aligning the text now.                                                                            // 1505\n\t\t\t\t\tif (firstRotated + this.fontSize / 2 > this.yLabelWidth + 8){                                                    // 1506\n\t\t\t\t\t\tthis.xScalePaddingLeft = firstRotated + this.fontSize / 2;                                                      // 1507\n\t\t\t\t\t}                                                                                                                // 1508\n\t\t\t\t\tthis.xScalePaddingRight = this.fontSize/2;                                                                       // 1509\n                                                                                                                      // 1510\n                                                                                                                      // 1511\n\t\t\t\t\tthis.xLabelRotation++;                                                                                           // 1512\n\t\t\t\t\tthis.xLabelWidth = cosRotation * originalLabelWidth;                                                             // 1513\n                                                                                                                      // 1514\n\t\t\t\t}                                                                                                                 // 1515\n\t\t\t\tif (this.xLabelRotation > 0){                                                                                     // 1516\n\t\t\t\t\tthis.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;                                // 1517\n\t\t\t\t}                                                                                                                 // 1518\n\t\t\t}                                                                                                                  // 1519\n\t\t\telse{                                                                                                              // 1520\n\t\t\t\tthis.xLabelWidth = 0;                                                                                             // 1521\n\t\t\t\tthis.xScalePaddingRight = this.padding;                                                                           // 1522\n\t\t\t\tthis.xScalePaddingLeft = this.padding;                                                                            // 1523\n\t\t\t}                                                                                                                  // 1524\n                                                                                                                      // 1525\n\t\t},                                                                                                                  // 1526\n\t\t// Needs to be overidden in each Chart type                                                                         // 1527\n\t\t// Otherwise we need to pass all the data into the scale class                                                      // 1528\n\t\tcalculateYRange: noop,                                                                                              // 1529\n\t\tdrawingArea: function(){                                                                                            // 1530\n\t\t\treturn this.startPoint - this.endPoint;                                                                            // 1531\n\t\t},                                                                                                                  // 1532\n\t\tcalculateY : function(value){                                                                                       // 1533\n\t\t\tvar scalingFactor = this.drawingArea() / (this.min - this.max);                                                    // 1534\n\t\t\treturn this.endPoint - (scalingFactor * (value - this.min));                                                       // 1535\n\t\t},                                                                                                                  // 1536\n\t\tcalculateX : function(index){                                                                                       // 1537\n\t\t\tvar isRotated = (this.xLabelRotation > 0),                                                                         // 1538\n\t\t\t\t// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,\n\t\t\t\tinnerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),                                     // 1540\n\t\t\t\tvalueWidth = innerWidth/(this.valuesCount - ((this.offsetGridLines) ? 0 : 1)),                                    // 1541\n\t\t\t\tvalueOffset = (valueWidth * index) + this.xScalePaddingLeft;                                                      // 1542\n                                                                                                                      // 1543\n\t\t\tif (this.offsetGridLines){                                                                                         // 1544\n\t\t\t\tvalueOffset += (valueWidth/2);                                                                                    // 1545\n\t\t\t}                                                                                                                  // 1546\n                                                                                                                      // 1547\n\t\t\treturn Math.round(valueOffset);                                                                                    // 1548\n\t\t},                                                                                                                  // 1549\n\t\tupdate : function(newProps){                                                                                        // 1550\n\t\t\thelpers.extend(this, newProps);                                                                                    // 1551\n\t\t\tthis.fit();                                                                                                        // 1552\n\t\t},                                                                                                                  // 1553\n\t\tdraw : function(){                                                                                                  // 1554\n\t\t\tvar ctx = this.ctx,                                                                                                // 1555\n\t\t\t\tyLabelGap = (this.endPoint - this.startPoint) / this.steps,                                                       // 1556\n\t\t\t\txStart = Math.round(this.xScalePaddingLeft);                                                                      // 1557\n\t\t\tif (this.display){                                                                                                 // 1558\n\t\t\t\tctx.fillStyle = this.textColor;                                                                                   // 1559\n\t\t\t\tctx.font = this.font;                                                                                             // 1560\n\t\t\t\teach(this.yLabels,function(labelString,index){                                                                    // 1561\n\t\t\t\t\tvar yLabelCenter = this.endPoint - (yLabelGap * index),                                                          // 1562\n\t\t\t\t\t\tlinePositionY = Math.round(yLabelCenter);                                                                       // 1563\n                                                                                                                      // 1564\n\t\t\t\t\tctx.textAlign = \"right\";                                                                                         // 1565\n\t\t\t\t\tctx.textBaseline = \"middle\";                                                                                     // 1566\n\t\t\t\t\tif (this.showLabels){                                                                                            // 1567\n\t\t\t\t\t\tctx.fillText(labelString,xStart - 10,yLabelCenter);                                                             // 1568\n\t\t\t\t\t}                                                                                                                // 1569\n\t\t\t\t\tctx.beginPath();                                                                                                 // 1570\n\t\t\t\t\tif (index > 0){                                                                                                  // 1571\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that                                                              // 1572\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;                                                                             // 1573\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;                                                                           // 1574\n\t\t\t\t\t} else {                                                                                                         // 1575\n\t\t\t\t\t\t// This is the first line on the scale                                                                          // 1576\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;                                                                                 // 1577\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;                                                                               // 1578\n\t\t\t\t\t}                                                                                                                // 1579\n                                                                                                                      // 1580\n\t\t\t\t\tlinePositionY += helpers.aliasPixel(ctx.lineWidth);                                                              // 1581\n                                                                                                                      // 1582\n\t\t\t\t\tctx.moveTo(xStart, linePositionY);                                                                               // 1583\n\t\t\t\t\tctx.lineTo(this.width, linePositionY);                                                                           // 1584\n\t\t\t\t\tctx.stroke();                                                                                                    // 1585\n\t\t\t\t\tctx.closePath();                                                                                                 // 1586\n                                                                                                                      // 1587\n\t\t\t\t\tctx.lineWidth = this.lineWidth;                                                                                  // 1588\n\t\t\t\t\tctx.strokeStyle = this.lineColor;                                                                                // 1589\n\t\t\t\t\tctx.beginPath();                                                                                                 // 1590\n\t\t\t\t\tctx.moveTo(xStart - 5, linePositionY);                                                                           // 1591\n\t\t\t\t\tctx.lineTo(xStart, linePositionY);                                                                               // 1592\n\t\t\t\t\tctx.stroke();                                                                                                    // 1593\n\t\t\t\t\tctx.closePath();                                                                                                 // 1594\n                                                                                                                      // 1595\n\t\t\t\t},this);                                                                                                          // 1596\n                                                                                                                      // 1597\n\t\t\t\teach(this.xLabels,function(label,index){                                                                          // 1598\n\t\t\t\t\tvar xPos = this.calculateX(index) + aliasPixel(this.lineWidth),                                                  // 1599\n\t\t\t\t\t\t// Check to see if line/bar here and decide where to place the line                                             // 1600\n\t\t\t\t\t\tlinePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),               // 1601\n\t\t\t\t\t\tisRotated = (this.xLabelRotation > 0);                                                                          // 1602\n                                                                                                                      // 1603\n\t\t\t\t\tctx.beginPath();                                                                                                 // 1604\n                                                                                                                      // 1605\n\t\t\t\t\tif (index > 0){                                                                                                  // 1606\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that                                                              // 1607\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;                                                                             // 1608\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;                                                                           // 1609\n\t\t\t\t\t} else {                                                                                                         // 1610\n\t\t\t\t\t\t// This is the first line on the scale                                                                          // 1611\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;                                                                                 // 1612\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;                                                                               // 1613\n\t\t\t\t\t}                                                                                                                // 1614\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);                                                                               // 1615\n\t\t\t\t\tctx.lineTo(linePos,this.startPoint - 3);                                                                         // 1616\n\t\t\t\t\tctx.stroke();                                                                                                    // 1617\n\t\t\t\t\tctx.closePath();                                                                                                 // 1618\n                                                                                                                      // 1619\n                                                                                                                      // 1620\n\t\t\t\t\tctx.lineWidth = this.lineWidth;                                                                                  // 1621\n\t\t\t\t\tctx.strokeStyle = this.lineColor;                                                                                // 1622\n                                                                                                                      // 1623\n                                                                                                                      // 1624\n\t\t\t\t\t// Small lines at the bottom of the base grid line                                                               // 1625\n\t\t\t\t\tctx.beginPath();                                                                                                 // 1626\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);                                                                               // 1627\n\t\t\t\t\tctx.lineTo(linePos,this.endPoint + 5);                                                                           // 1628\n\t\t\t\t\tctx.stroke();                                                                                                    // 1629\n\t\t\t\t\tctx.closePath();                                                                                                 // 1630\n                                                                                                                      // 1631\n\t\t\t\t\tctx.save();                                                                                                      // 1632\n\t\t\t\t\tctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);                                        // 1633\n\t\t\t\t\tctx.rotate(toRadians(this.xLabelRotation)*-1);                                                                   // 1634\n\t\t\t\t\tctx.font = this.font;                                                                                            // 1635\n\t\t\t\t\tctx.textAlign = (isRotated) ? \"right\" : \"center\";                                                                // 1636\n\t\t\t\t\tctx.textBaseline = (isRotated) ? \"middle\" : \"top\";                                                               // 1637\n\t\t\t\t\tctx.fillText(label, 0, 0);                                                                                       // 1638\n\t\t\t\t\tctx.restore();                                                                                                   // 1639\n\t\t\t\t},this);                                                                                                          // 1640\n                                                                                                                      // 1641\n\t\t\t}                                                                                                                  // 1642\n\t\t}                                                                                                                   // 1643\n                                                                                                                      // 1644\n\t});                                                                                                                  // 1645\n                                                                                                                      // 1646\n\tChart.RadialScale = Chart.Element.extend({                                                                           // 1647\n\t\tinitialize: function(){                                                                                             // 1648\n\t\t\tthis.size = min([this.height, this.width]);                                                                        // 1649\n\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);     // 1650\n\t\t},                                                                                                                  // 1651\n\t\tcalculateCenterOffset: function(value){                                                                             // 1652\n\t\t\t// Take into account half font size + the yPadding of the top value                                                // 1653\n\t\t\tvar scalingFactor = this.drawingArea / (this.max - this.min);                                                      // 1654\n                                                                                                                      // 1655\n\t\t\treturn (value - this.min) * scalingFactor;                                                                         // 1656\n\t\t},                                                                                                                  // 1657\n\t\tupdate : function(){                                                                                                // 1658\n\t\t\tif (!this.lineArc){                                                                                                // 1659\n\t\t\t\tthis.setScaleSize();                                                                                              // 1660\n\t\t\t} else {                                                                                                           // 1661\n\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);    // 1662\n\t\t\t}                                                                                                                  // 1663\n\t\t\tthis.buildYLabels();                                                                                               // 1664\n\t\t},                                                                                                                  // 1665\n\t\tbuildYLabels: function(){                                                                                           // 1666\n\t\t\tthis.yLabels = [];                                                                                                 // 1667\n                                                                                                                      // 1668\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);                                                          // 1669\n                                                                                                                      // 1670\n\t\t\tfor (var i=0; i<=this.steps; i++){                                                                                 // 1671\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}                                                                                                                  // 1673\n\t\t},                                                                                                                  // 1674\n\t\tgetCircumference : function(){                                                                                      // 1675\n\t\t\treturn ((Math.PI*2) / this.valuesCount);                                                                           // 1676\n\t\t},                                                                                                                  // 1677\n\t\tsetScaleSize: function(){                                                                                           // 1678\n\t\t\t/*                                                                                                                 // 1679\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here                                       // 1680\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9                            // 1681\n\t\t\t *                                                                                                                 // 1682\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif                                       // 1683\n\t\t\t *                                                                                                                 // 1684\n\t\t\t * Solution:                                                                                                       // 1685\n\t\t\t *                                                                                                                 // 1686\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first                                     // 1687\n\t\t\t * at each index we check if the text overlaps.                                                                    // 1688\n\t\t\t *                                                                                                                 // 1689\n\t\t\t * Where it does, we store that angle and that index.                                                              // 1690\n\t\t\t *                                                                                                                 // 1691\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove                               // 1692\n\t\t\t * from the shape radius to move the point inwards by that x.                                                      // 1693\n\t\t\t *                                                                                                                 // 1694\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box                 // 1695\n\t\t\t * along with labels.                                                                                              // 1696\n\t\t\t *                                                                                                                 // 1697\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion                  // 1698\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.                   // 1699\n\t\t\t *                                                                                                                 // 1700\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels                      // 1701\n\t\t\t * and position it in the most space efficient manner                                                              // 1702\n\t\t\t *                                                                                                                 // 1703\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif                                                    // 1704\n\t\t\t */                                                                                                                // 1705\n                                                                                                                      // 1706\n                                                                                                                      // 1707\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.             // 1708\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\tvar largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),                    // 1710\n\t\t\t\tpointPosition,                                                                                                    // 1711\n\t\t\t\ti,                                                                                                                // 1712\n\t\t\t\ttextWidth,                                                                                                        // 1713\n\t\t\t\thalfTextWidth,                                                                                                    // 1714\n\t\t\t\tfurthestRight = this.width,                                                                                       // 1715\n\t\t\t\tfurthestRightIndex,                                                                                               // 1716\n\t\t\t\tfurthestRightAngle,                                                                                               // 1717\n\t\t\t\tfurthestLeft = 0,                                                                                                 // 1718\n\t\t\t\tfurthestLeftIndex,                                                                                                // 1719\n\t\t\t\tfurthestLeftAngle,                                                                                                // 1720\n\t\t\t\txProtrusionLeft,                                                                                                  // 1721\n\t\t\t\txProtrusionRight,                                                                                                 // 1722\n\t\t\t\tradiusReductionRight,                                                                                             // 1723\n\t\t\t\tradiusReductionLeft,                                                                                              // 1724\n\t\t\t\tmaxWidthRadius;                                                                                                   // 1725\n\t\t\tthis.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);            // 1726\n\t\t\tfor (i=0;i<this.valuesCount;i++){                                                                                  // 1727\n\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.                               // 1728\n\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);                                                  // 1729\n\t\t\t\ttextWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;             // 1730\n\t\t\t\tif (i === 0 || i === this.valuesCount/2){                                                                         // 1731\n\t\t\t\t\t// If we're at index zero, or exactly the middle, we're at exactly the top/bottom                                // 1732\n\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare                           // 1733\n\t\t\t\t\t// w/left and right text sizes                                                                                   // 1734\n\t\t\t\t\thalfTextWidth = textWidth/2;                                                                                     // 1735\n\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {                                                           // 1736\n\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;                                                                // 1737\n\t\t\t\t\t\tfurthestRightIndex = i;                                                                                         // 1738\n\t\t\t\t\t}                                                                                                                // 1739\n\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {                                                            // 1740\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;                                                                 // 1741\n\t\t\t\t\t\tfurthestLeftIndex = i;                                                                                          // 1742\n\t\t\t\t\t}                                                                                                                // 1743\n\t\t\t\t}                                                                                                                 // 1744\n\t\t\t\telse if (i < this.valuesCount/2) {                                                                                // 1745\n\t\t\t\t\t// Less than half the values means we'll left align the text                                                     // 1746\n\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {                                                               // 1747\n\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;                                                                    // 1748\n\t\t\t\t\t\tfurthestRightIndex = i;                                                                                         // 1749\n\t\t\t\t\t}                                                                                                                // 1750\n\t\t\t\t}                                                                                                                 // 1751\n\t\t\t\telse if (i > this.valuesCount/2){                                                                                 // 1752\n\t\t\t\t\t// More than half the values means we'll right align the text                                                    // 1753\n\t\t\t\t\tif (pointPosition.x - textWidth < furthestLeft) {                                                                // 1754\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;                                                                     // 1755\n\t\t\t\t\t\tfurthestLeftIndex = i;                                                                                          // 1756\n\t\t\t\t\t}                                                                                                                // 1757\n\t\t\t\t}                                                                                                                 // 1758\n\t\t\t}                                                                                                                  // 1759\n                                                                                                                      // 1760\n\t\t\txProtrusionLeft = furthestLeft;                                                                                    // 1761\n                                                                                                                      // 1762\n\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);                                                          // 1763\n                                                                                                                      // 1764\n\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);                                                       // 1765\n                                                                                                                      // 1766\n\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);                                                         // 1767\n                                                                                                                      // 1768\n\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);                                // 1769\n                                                                                                                      // 1770\n\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);                                   // 1771\n                                                                                                                      // 1772\n\t\t\t// Ensure we actually need to reduce the size of the chart                                                         // 1773\n\t\t\tradiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;                                // 1774\n\t\t\tradiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;                                   // 1775\n                                                                                                                      // 1776\n\t\t\tthis.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;                         // 1777\n                                                                                                                      // 1778\n\t\t\t//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])                  // 1779\n\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);                                                    // 1780\n                                                                                                                      // 1781\n\t\t},                                                                                                                  // 1782\n\t\tsetCenterPoint: function(leftMovement, rightMovement){                                                              // 1783\n                                                                                                                      // 1784\n\t\t\tvar maxRight = this.width - rightMovement - this.drawingArea,                                                      // 1785\n\t\t\t\tmaxLeft = leftMovement + this.drawingArea;                                                                        // 1786\n                                                                                                                      // 1787\n\t\t\tthis.xCenter = (maxLeft + maxRight)/2;                                                                             // 1788\n\t\t\t// Always vertically in the centre as the text height doesn't change                                               // 1789\n\t\t\tthis.yCenter = (this.height/2);                                                                                    // 1790\n\t\t},                                                                                                                  // 1791\n                                                                                                                      // 1792\n\t\tgetIndexAngle : function(index){                                                                                    // 1793\n\t\t\tvar angleMultiplier = (Math.PI * 2) / this.valuesCount;                                                            // 1794\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle                                          // 1795\n                                                                                                                      // 1796\n\t\t\treturn index * angleMultiplier - (Math.PI/2);                                                                      // 1797\n\t\t},                                                                                                                  // 1798\n\t\tgetPointPosition : function(index, distanceFromCenter){                                                             // 1799\n\t\t\tvar thisAngle = this.getIndexAngle(index);                                                                         // 1800\n\t\t\treturn {                                                                                                           // 1801\n\t\t\t\tx : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,                                                    // 1802\n\t\t\t\ty : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter                                                     // 1803\n\t\t\t};                                                                                                                 // 1804\n\t\t},                                                                                                                  // 1805\n\t\tdraw: function(){                                                                                                   // 1806\n\t\t\tif (this.display){                                                                                                 // 1807\n\t\t\t\tvar ctx = this.ctx;                                                                                               // 1808\n\t\t\t\teach(this.yLabels, function(label, index){                                                                        // 1809\n\t\t\t\t\t// Don't draw a centre value                                                                                     // 1810\n\t\t\t\t\tif (index > 0){                                                                                                  // 1811\n\t\t\t\t\t\tvar yCenterOffset = index * (this.drawingArea/this.steps),                                                      // 1812\n\t\t\t\t\t\t\tyHeight = this.yCenter - yCenterOffset,                                                                        // 1813\n\t\t\t\t\t\t\tpointPosition;                                                                                                 // 1814\n                                                                                                                      // 1815\n\t\t\t\t\t\t// Draw circular lines around the scale                                                                         // 1816\n\t\t\t\t\t\tif (this.lineWidth > 0){                                                                                        // 1817\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;                                                                              // 1818\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;                                                                                // 1819\n                                                                                                                      // 1820\n\t\t\t\t\t\t\tif(this.lineArc){                                                                                              // 1821\n\t\t\t\t\t\t\t\tctx.beginPath();                                                                                              // 1822\n\t\t\t\t\t\t\t\tctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);                                             // 1823\n\t\t\t\t\t\t\t\tctx.closePath();                                                                                              // 1824\n\t\t\t\t\t\t\t\tctx.stroke();                                                                                                 // 1825\n\t\t\t\t\t\t\t} else{                                                                                                        // 1826\n\t\t\t\t\t\t\t\tctx.beginPath();                                                                                              // 1827\n\t\t\t\t\t\t\t\tfor (var i=0;i<this.valuesCount;i++)                                                                          // 1828\n\t\t\t\t\t\t\t\t{                                                                                                             // 1829\n\t\t\t\t\t\t\t\t\tpointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));   // 1830\n\t\t\t\t\t\t\t\t\tif (i === 0){                                                                                                // 1831\n\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);                                                               // 1832\n\t\t\t\t\t\t\t\t\t} else {                                                                                                     // 1833\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);                                                               // 1834\n\t\t\t\t\t\t\t\t\t}                                                                                                            // 1835\n\t\t\t\t\t\t\t\t}                                                                                                             // 1836\n\t\t\t\t\t\t\t\tctx.closePath();                                                                                              // 1837\n\t\t\t\t\t\t\t\tctx.stroke();                                                                                                 // 1838\n\t\t\t\t\t\t\t}                                                                                                              // 1839\n\t\t\t\t\t\t}                                                                                                               // 1840\n\t\t\t\t\t\tif(this.showLabels){                                                                                            // 1841\n\t\t\t\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);                                           // 1842\n\t\t\t\t\t\t\tif (this.showLabelBackdrop){                                                                                   // 1843\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;                                                                // 1844\n\t\t\t\t\t\t\t\tctx.fillStyle = this.backdropColor;                                                                           // 1845\n\t\t\t\t\t\t\t\tctx.fillRect(                                                                                                 // 1846\n\t\t\t\t\t\t\t\t\tthis.xCenter - labelWidth/2 - this.backdropPaddingX,                                                         // 1847\n\t\t\t\t\t\t\t\t\tyHeight - this.fontSize/2 - this.backdropPaddingY,                                                           // 1848\n\t\t\t\t\t\t\t\t\tlabelWidth + this.backdropPaddingX*2,                                                                        // 1849\n\t\t\t\t\t\t\t\t\tthis.fontSize + this.backdropPaddingY*2                                                                      // 1850\n\t\t\t\t\t\t\t\t);                                                                                                            // 1851\n\t\t\t\t\t\t\t}                                                                                                              // 1852\n\t\t\t\t\t\t\tctx.textAlign = 'center';                                                                                      // 1853\n\t\t\t\t\t\t\tctx.textBaseline = \"middle\";                                                                                   // 1854\n\t\t\t\t\t\t\tctx.fillStyle = this.fontColor;                                                                                // 1855\n\t\t\t\t\t\t\tctx.fillText(label, this.xCenter, yHeight);                                                                    // 1856\n\t\t\t\t\t\t}                                                                                                               // 1857\n\t\t\t\t\t}                                                                                                                // 1858\n\t\t\t\t}, this);                                                                                                         // 1859\n                                                                                                                      // 1860\n\t\t\t\tif (!this.lineArc){                                                                                               // 1861\n\t\t\t\t\tctx.lineWidth = this.angleLineWidth;                                                                             // 1862\n\t\t\t\t\tctx.strokeStyle = this.angleLineColor;                                                                           // 1863\n\t\t\t\t\tfor (var i = this.valuesCount - 1; i >= 0; i--) {                                                                // 1864\n\t\t\t\t\t\tif (this.angleLineWidth > 0){                                                                                   // 1865\n\t\t\t\t\t\t\tvar outerPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max));                            // 1866\n\t\t\t\t\t\t\tctx.beginPath();                                                                                               // 1867\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);                                                                        // 1868\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);                                                                  // 1869\n\t\t\t\t\t\t\tctx.stroke();                                                                                                  // 1870\n\t\t\t\t\t\t\tctx.closePath();                                                                                               // 1871\n\t\t\t\t\t\t}                                                                                                               // 1872\n\t\t\t\t\t\t// Extra 3px out for some label spacing                                                                         // 1873\n\t\t\t\t\t\tvar pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);                    // 1874\n\t\t\t\t\t\tctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);              // 1875\n\t\t\t\t\t\tctx.fillStyle = this.pointLabelFontColor;                                                                       // 1876\n                                                                                                                      // 1877\n\t\t\t\t\t\tvar labelsCount = this.labels.length,                                                                           // 1878\n\t\t\t\t\t\t\thalfLabelsCount = this.labels.length/2,                                                                        // 1879\n\t\t\t\t\t\t\tquarterLabelsCount = halfLabelsCount/2,                                                                        // 1880\n\t\t\t\t\t\t\tupperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),                                  // 1881\n\t\t\t\t\t\t\texactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);                           // 1882\n\t\t\t\t\t\tif (i === 0){                                                                                                   // 1883\n\t\t\t\t\t\t\tctx.textAlign = 'center';                                                                                      // 1884\n\t\t\t\t\t\t} else if(i === halfLabelsCount){                                                                               // 1885\n\t\t\t\t\t\t\tctx.textAlign = 'center';                                                                                      // 1886\n\t\t\t\t\t\t} else if (i < halfLabelsCount){                                                                                // 1887\n\t\t\t\t\t\t\tctx.textAlign = 'left';                                                                                        // 1888\n\t\t\t\t\t\t} else {                                                                                                        // 1889\n\t\t\t\t\t\t\tctx.textAlign = 'right';                                                                                       // 1890\n\t\t\t\t\t\t}                                                                                                               // 1891\n                                                                                                                      // 1892\n\t\t\t\t\t\t// Set the correct text baseline based on outer positioning                                                     // 1893\n\t\t\t\t\t\tif (exactQuarter){                                                                                              // 1894\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';                                                                                   // 1895\n\t\t\t\t\t\t} else if (upperHalf){                                                                                          // 1896\n\t\t\t\t\t\t\tctx.textBaseline = 'bottom';                                                                                   // 1897\n\t\t\t\t\t\t} else {                                                                                                        // 1898\n\t\t\t\t\t\t\tctx.textBaseline = 'top';                                                                                      // 1899\n\t\t\t\t\t\t}                                                                                                               // 1900\n                                                                                                                      // 1901\n\t\t\t\t\t\tctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);                                       // 1902\n\t\t\t\t\t}                                                                                                                // 1903\n\t\t\t\t}                                                                                                                 // 1904\n\t\t\t}                                                                                                                  // 1905\n\t\t}                                                                                                                   // 1906\n\t});                                                                                                                  // 1907\n                                                                                                                      // 1908\n\t// Attach global event to resize each chart instance when the browser resizes                                        // 1909\n\thelpers.addEvent(window, \"resize\", (function(){                                                                      // 1910\n\t\t// Basic debounce of resize function so it doesn't hurt performance when resizing browser.                          // 1911\n\t\tvar timeout;                                                                                                        // 1912\n\t\treturn function(){                                                                                                  // 1913\n\t\t\tclearTimeout(timeout);                                                                                             // 1914\n\t\t\ttimeout = setTimeout(function(){                                                                                   // 1915\n\t\t\t\teach(Chart.instances,function(instance){                                                                          // 1916\n\t\t\t\t\t// If the responsive flag is set in the chart instance config                                                    // 1917\n\t\t\t\t\t// Cascade the resize event down to the chart.                                                                   // 1918\n\t\t\t\t\tif (instance.options.responsive){                                                                                // 1919\n\t\t\t\t\t\tinstance.resize(instance.render, true);                                                                         // 1920\n\t\t\t\t\t}                                                                                                                // 1921\n\t\t\t\t});                                                                                                               // 1922\n\t\t\t}, 50);                                                                                                            // 1923\n\t\t};                                                                                                                  // 1924\n\t})());                                                                                                               // 1925\n                                                                                                                      // 1926\n                                                                                                                      // 1927\n\tif (amd) {                                                                                                           // 1928\n\t\tdefine(function(){                                                                                                  // 1929\n\t\t\treturn Chart;                                                                                                      // 1930\n\t\t});                                                                                                                 // 1931\n\t} else if (typeof module === 'object' && module.exports) {                                                           // 1932\n\t\tmodule.exports = Chart;                                                                                             // 1933\n\t}                                                                                                                    // 1934\n                                                                                                                      // 1935\n\troot.Chart = Chart;                                                                                                  // 1936\n                                                                                                                      // 1937\n\tChart.noConflict = function(){                                                                                       // 1938\n\t\troot.Chart = previous;                                                                                              // 1939\n\t\treturn Chart;                                                                                                       // 1940\n\t};                                                                                                                   // 1941\n                                                                                                                      // 1942\n}).call(this);                                                                                                        // 1943\n                                                                                                                      // 1944\n(function(){                                                                                                          // 1945\n\t\"use strict\";                                                                                                        // 1946\n                                                                                                                      // 1947\n\tvar root = this,                                                                                                     // 1948\n\t\tChart = root.Chart,                                                                                                 // 1949\n\t\thelpers = Chart.helpers;                                                                                            // 1950\n                                                                                                                      // 1951\n                                                                                                                      // 1952\n\tvar defaultConfig = {                                                                                                // 1953\n\t\t//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value             // 1954\n\t\tscaleBeginAtZero : true,                                                                                            // 1955\n                                                                                                                      // 1956\n\t\t//Boolean - Whether grid lines are shown across the chart                                                           // 1957\n\t\tscaleShowGridLines : true,                                                                                          // 1958\n                                                                                                                      // 1959\n\t\t//String - Colour of the grid lines                                                                                 // 1960\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",                                                                             // 1961\n                                                                                                                      // 1962\n\t\t//Number - Width of the grid lines                                                                                  // 1963\n\t\tscaleGridLineWidth : 1,                                                                                             // 1964\n                                                                                                                      // 1965\n\t\t//Boolean - If there is a stroke on each bar                                                                        // 1966\n\t\tbarShowStroke : true,                                                                                               // 1967\n                                                                                                                      // 1968\n\t\t//Number - Pixel width of the bar stroke                                                                            // 1969\n\t\tbarStrokeWidth : 2,                                                                                                 // 1970\n                                                                                                                      // 1971\n\t\t//Number - Spacing between each of the X value sets                                                                 // 1972\n\t\tbarValueSpacing : 5,                                                                                                // 1973\n                                                                                                                      // 1974\n\t\t//Number - Spacing between data sets within X values                                                                // 1975\n\t\tbarDatasetSpacing : 1,                                                                                              // 1976\n                                                                                                                      // 1977\n\t\t//String - A legend template                                                                                        // 1978\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].fillColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n                                                                                                                      // 1980\n\t};                                                                                                                   // 1981\n                                                                                                                      // 1982\n                                                                                                                      // 1983\n\tChart.Type.extend({                                                                                                  // 1984\n\t\tname: \"Bar\",                                                                                                        // 1985\n\t\tdefaults : defaultConfig,                                                                                           // 1986\n\t\tinitialize:  function(data){                                                                                        // 1987\n                                                                                                                      // 1988\n\t\t\t//Expose options as a scope variable here so we can access it in the ScaleClass                                    // 1989\n\t\t\tvar options = this.options;                                                                                        // 1990\n                                                                                                                      // 1991\n\t\t\tthis.ScaleClass = Chart.Scale.extend({                                                                             // 1992\n\t\t\t\toffsetGridLines : true,                                                                                           // 1993\n\t\t\t\tcalculateBarX : function(datasetCount, datasetIndex, barIndex){                                                   // 1994\n\t\t\t\t\t//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar          // 1995\n\t\t\t\t\tvar xWidth = this.calculateBaseWidth(),                                                                          // 1996\n\t\t\t\t\t\txAbsolute = this.calculateX(barIndex) - (xWidth/2),                                                             // 1997\n\t\t\t\t\t\tbarWidth = this.calculateBarWidth(datasetCount);                                                                // 1998\n                                                                                                                      // 1999\n\t\t\t\t\treturn xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;          // 2000\n\t\t\t\t},                                                                                                                // 2001\n\t\t\t\tcalculateBaseWidth : function(){                                                                                  // 2002\n\t\t\t\t\treturn (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);                                  // 2003\n\t\t\t\t},                                                                                                                // 2004\n\t\t\t\tcalculateBarWidth : function(datasetCount){                                                                       // 2005\n\t\t\t\t\t//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset         // 2006\n\t\t\t\t\tvar baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);                    // 2007\n                                                                                                                      // 2008\n\t\t\t\t\treturn (baseWidth / datasetCount);                                                                               // 2009\n\t\t\t\t}                                                                                                                 // 2010\n\t\t\t});                                                                                                                // 2011\n                                                                                                                      // 2012\n\t\t\tthis.datasets = [];                                                                                                // 2013\n                                                                                                                      // 2014\n\t\t\t//Set up tooltip events on the chart                                                                               // 2015\n\t\t\tif (this.options.showTooltips){                                                                                    // 2016\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){                                               // 2017\n\t\t\t\t\tvar activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];                                      // 2018\n                                                                                                                      // 2019\n\t\t\t\t\tthis.eachBars(function(bar){                                                                                     // 2020\n\t\t\t\t\t\tbar.restore(['fillColor', 'strokeColor']);                                                                      // 2021\n\t\t\t\t\t});                                                                                                              // 2022\n\t\t\t\t\thelpers.each(activeBars, function(activeBar){                                                                    // 2023\n\t\t\t\t\t\tactiveBar.fillColor = activeBar.highlightFill;                                                                  // 2024\n\t\t\t\t\t\tactiveBar.strokeColor = activeBar.highlightStroke;                                                              // 2025\n\t\t\t\t\t});                                                                                                              // 2026\n\t\t\t\t\tthis.showTooltip(activeBars);                                                                                    // 2027\n\t\t\t\t});                                                                                                               // 2028\n\t\t\t}                                                                                                                  // 2029\n                                                                                                                      // 2030\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor                // 2031\n\t\t\tthis.BarClass = Chart.Rectangle.extend({                                                                           // 2032\n\t\t\t\tstrokeWidth : this.options.barStrokeWidth,                                                                        // 2033\n\t\t\t\tshowStroke : this.options.barShowStroke,                                                                          // 2034\n\t\t\t\tctx : this.chart.ctx                                                                                              // 2035\n\t\t\t});                                                                                                                // 2036\n                                                                                                                      // 2037\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart                                // 2038\n\t\t\thelpers.each(data.datasets,function(dataset,datasetIndex){                                                         // 2039\n                                                                                                                      // 2040\n\t\t\t\tvar datasetObject = {                                                                                             // 2041\n\t\t\t\t\tlabel : dataset.label || null,                                                                                   // 2042\n\t\t\t\t\tfillColor : dataset.fillColor,                                                                                   // 2043\n\t\t\t\t\tstrokeColor : dataset.strokeColor,                                                                               // 2044\n\t\t\t\t\tbars : []                                                                                                        // 2045\n\t\t\t\t};                                                                                                                // 2046\n                                                                                                                      // 2047\n\t\t\t\tthis.datasets.push(datasetObject);                                                                                // 2048\n                                                                                                                      // 2049\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){                                                              // 2050\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.                                     // 2051\n\t\t\t\t\tdatasetObject.bars.push(new this.BarClass({                                                                      // 2052\n\t\t\t\t\t\tvalue : dataPoint,                                                                                              // 2053\n\t\t\t\t\t\tlabel : data.labels[index],                                                                                     // 2054\n\t\t\t\t\t\tdatasetLabel: dataset.label,                                                                                    // 2055\n\t\t\t\t\t\tstrokeColor : dataset.strokeColor,                                                                              // 2056\n\t\t\t\t\t\tfillColor : dataset.fillColor,                                                                                  // 2057\n\t\t\t\t\t\thighlightFill : dataset.highlightFill || dataset.fillColor,                                                     // 2058\n\t\t\t\t\t\thighlightStroke : dataset.highlightStroke || dataset.strokeColor                                                // 2059\n\t\t\t\t\t}));                                                                                                             // 2060\n\t\t\t\t},this);                                                                                                          // 2061\n                                                                                                                      // 2062\n\t\t\t},this);                                                                                                           // 2063\n                                                                                                                      // 2064\n\t\t\tthis.buildScale(data.labels);                                                                                      // 2065\n                                                                                                                      // 2066\n\t\t\tthis.BarClass.prototype.base = this.scale.endPoint;                                                                // 2067\n                                                                                                                      // 2068\n\t\t\tthis.eachBars(function(bar, index, datasetIndex){                                                                  // 2069\n\t\t\t\thelpers.extend(bar, {                                                                                             // 2070\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),                                                      // 2071\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),                                          // 2072\n\t\t\t\t\ty: this.scale.endPoint                                                                                           // 2073\n\t\t\t\t});                                                                                                               // 2074\n\t\t\t\tbar.save();                                                                                                       // 2075\n\t\t\t}, this);                                                                                                          // 2076\n                                                                                                                      // 2077\n\t\t\tthis.render();                                                                                                     // 2078\n\t\t},                                                                                                                  // 2079\n\t\tupdate : function(){                                                                                                // 2080\n\t\t\tthis.scale.update();                                                                                               // 2081\n\t\t\t// Reset any highlight colours before updating.                                                                    // 2082\n\t\t\thelpers.each(this.activeElements, function(activeElement){                                                         // 2083\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);                                                              // 2084\n\t\t\t});                                                                                                                // 2085\n                                                                                                                      // 2086\n\t\t\tthis.eachBars(function(bar){                                                                                       // 2087\n\t\t\t\tbar.save();                                                                                                       // 2088\n\t\t\t});                                                                                                                // 2089\n\t\t\tthis.render();                                                                                                     // 2090\n\t\t},                                                                                                                  // 2091\n\t\teachBars : function(callback){                                                                                      // 2092\n\t\t\thelpers.each(this.datasets,function(dataset, datasetIndex){                                                        // 2093\n\t\t\t\thelpers.each(dataset.bars, callback, this, datasetIndex);                                                         // 2094\n\t\t\t},this);                                                                                                           // 2095\n\t\t},                                                                                                                  // 2096\n\t\tgetBarsAtEvent : function(e){                                                                                       // 2097\n\t\t\tvar barsArray = [],                                                                                                // 2098\n\t\t\t\teventPosition = helpers.getRelativePosition(e),                                                                   // 2099\n\t\t\t\tdatasetIterator = function(dataset){                                                                              // 2100\n\t\t\t\t\tbarsArray.push(dataset.bars[barIndex]);                                                                          // 2101\n\t\t\t\t},                                                                                                                // 2102\n\t\t\t\tbarIndex;                                                                                                         // 2103\n                                                                                                                      // 2104\n\t\t\tfor (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {                                  // 2105\n\t\t\t\tfor (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {                              // 2106\n\t\t\t\t\tif (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){                        // 2107\n\t\t\t\t\t\thelpers.each(this.datasets, datasetIterator);                                                                   // 2108\n\t\t\t\t\t\treturn barsArray;                                                                                               // 2109\n\t\t\t\t\t}                                                                                                                // 2110\n\t\t\t\t}                                                                                                                 // 2111\n\t\t\t}                                                                                                                  // 2112\n                                                                                                                      // 2113\n\t\t\treturn barsArray;                                                                                                  // 2114\n\t\t},                                                                                                                  // 2115\n\t\tbuildScale : function(labels){                                                                                      // 2116\n\t\t\tvar self = this;                                                                                                   // 2117\n                                                                                                                      // 2118\n\t\t\tvar dataTotal = function(){                                                                                        // 2119\n\t\t\t\tvar values = [];                                                                                                  // 2120\n\t\t\t\tself.eachBars(function(bar){                                                                                      // 2121\n\t\t\t\t\tvalues.push(bar.value);                                                                                          // 2122\n\t\t\t\t});                                                                                                               // 2123\n\t\t\t\treturn values;                                                                                                    // 2124\n\t\t\t};                                                                                                                 // 2125\n                                                                                                                      // 2126\n\t\t\tvar scaleOptions = {                                                                                               // 2127\n\t\t\t\ttemplateString : this.options.scaleLabel,                                                                         // 2128\n\t\t\t\theight : this.chart.height,                                                                                       // 2129\n\t\t\t\twidth : this.chart.width,                                                                                         // 2130\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 2131\n\t\t\t\ttextColor : this.options.scaleFontColor,                                                                          // 2132\n\t\t\t\tfontSize : this.options.scaleFontSize,                                                                            // 2133\n\t\t\t\tfontStyle : this.options.scaleFontStyle,                                                                          // 2134\n\t\t\t\tfontFamily : this.options.scaleFontFamily,                                                                        // 2135\n\t\t\t\tvaluesCount : labels.length,                                                                                      // 2136\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,                                                                      // 2137\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,                                                                    // 2138\n\t\t\t\tcalculateYRange: function(currentHeight){                                                                         // 2139\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(                                                                 // 2140\n\t\t\t\t\t\tdataTotal(),                                                                                                    // 2141\n\t\t\t\t\t\tcurrentHeight,                                                                                                  // 2142\n\t\t\t\t\t\tthis.fontSize,                                                                                                  // 2143\n\t\t\t\t\t\tthis.beginAtZero,                                                                                               // 2144\n\t\t\t\t\t\tthis.integersOnly                                                                                               // 2145\n\t\t\t\t\t);                                                                                                               // 2146\n\t\t\t\t\thelpers.extend(this, updatedRanges);                                                                             // 2147\n\t\t\t\t},                                                                                                                // 2148\n\t\t\t\txLabels : labels,                                                                                                 // 2149\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily), // 2150\n\t\t\t\tlineWidth : this.options.scaleLineWidth,                                                                          // 2151\n\t\t\t\tlineColor : this.options.scaleLineColor,                                                                          // 2152\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,                          // 2153\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",            // 2154\n\t\t\t\tpadding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,          // 2155\n\t\t\t\tshowLabels : this.options.scaleShowLabels,                                                                        // 2156\n\t\t\t\tdisplay : this.options.showScale                                                                                  // 2157\n\t\t\t};                                                                                                                 // 2158\n                                                                                                                      // 2159\n\t\t\tif (this.options.scaleOverride){                                                                                   // 2160\n\t\t\t\thelpers.extend(scaleOptions, {                                                                                    // 2161\n\t\t\t\t\tcalculateYRange: helpers.noop,                                                                                   // 2162\n\t\t\t\t\tsteps: this.options.scaleSteps,                                                                                  // 2163\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,                                                                          // 2164\n\t\t\t\t\tmin: this.options.scaleStartValue,                                                                               // 2165\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)                      // 2166\n\t\t\t\t});                                                                                                               // 2167\n\t\t\t}                                                                                                                  // 2168\n                                                                                                                      // 2169\n\t\t\tthis.scale = new this.ScaleClass(scaleOptions);                                                                    // 2170\n\t\t},                                                                                                                  // 2171\n\t\taddData : function(valuesArray,label){                                                                              // 2172\n\t\t\t//Map the values array for each of the datasets                                                                    // 2173\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){                                                             // 2174\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.                                      // 2175\n\t\t\t\tthis.datasets[datasetIndex].bars.push(new this.BarClass({                                                         // 2176\n\t\t\t\t\tvalue : value,                                                                                                   // 2177\n\t\t\t\t\tlabel : label,                                                                                                   // 2178\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),                       // 2179\n\t\t\t\t\ty: this.scale.endPoint,                                                                                          // 2180\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),                                                      // 2181\n\t\t\t\t\tbase : this.scale.endPoint,                                                                                      // 2182\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].strokeColor,                                                           // 2183\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].fillColor                                                                // 2184\n\t\t\t\t}));                                                                                                              // 2185\n\t\t\t},this);                                                                                                           // 2186\n                                                                                                                      // 2187\n\t\t\tthis.scale.addXLabel(label);                                                                                       // 2188\n\t\t\t//Then re-render the chart.                                                                                        // 2189\n\t\t\tthis.update();                                                                                                     // 2190\n\t\t},                                                                                                                  // 2191\n\t\tremoveData : function(){                                                                                            // 2192\n\t\t\tthis.scale.removeXLabel();                                                                                         // 2193\n\t\t\t//Then re-render the chart.                                                                                        // 2194\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 2195\n\t\t\t\tdataset.bars.shift();                                                                                             // 2196\n\t\t\t},this);                                                                                                           // 2197\n\t\t\tthis.update();                                                                                                     // 2198\n\t\t},                                                                                                                  // 2199\n\t\treflow : function(){                                                                                                // 2200\n\t\t\thelpers.extend(this.BarClass.prototype,{                                                                           // 2201\n\t\t\t\ty: this.scale.endPoint,                                                                                           // 2202\n\t\t\t\tbase : this.scale.endPoint                                                                                        // 2203\n\t\t\t});                                                                                                                // 2204\n\t\t\tvar newScaleProps = helpers.extend({                                                                               // 2205\n\t\t\t\theight : this.chart.height,                                                                                       // 2206\n\t\t\t\twidth : this.chart.width                                                                                          // 2207\n\t\t\t});                                                                                                                // 2208\n\t\t\tthis.scale.update(newScaleProps);                                                                                  // 2209\n\t\t},                                                                                                                  // 2210\n\t\tdraw : function(ease){                                                                                              // 2211\n\t\t\tvar easingDecimal = ease || 1;                                                                                     // 2212\n\t\t\tthis.clear();                                                                                                      // 2213\n                                                                                                                      // 2214\n\t\t\tvar ctx = this.chart.ctx;                                                                                          // 2215\n                                                                                                                      // 2216\n\t\t\tthis.scale.draw(easingDecimal);                                                                                    // 2217\n                                                                                                                      // 2218\n\t\t\t//Draw all the bars for each dataset                                                                               // 2219\n\t\t\thelpers.each(this.datasets,function(dataset,datasetIndex){                                                         // 2220\n\t\t\t\thelpers.each(dataset.bars,function(bar,index){                                                                    // 2221\n\t\t\t\t\tif (bar.hasValue()){                                                                                             // 2222\n\t\t\t\t\t\tbar.base = this.scale.endPoint;                                                                                 // 2223\n\t\t\t\t\t\t//Transition then draw                                                                                          // 2224\n\t\t\t\t\t\tbar.transition({                                                                                                // 2225\n\t\t\t\t\t\t\tx : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),                                       // 2226\n\t\t\t\t\t\t\ty : this.scale.calculateY(bar.value),                                                                          // 2227\n\t\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length)                                                     // 2228\n\t\t\t\t\t\t}, easingDecimal).draw();                                                                                       // 2229\n\t\t\t\t\t}                                                                                                                // 2230\n\t\t\t\t},this);                                                                                                          // 2231\n                                                                                                                      // 2232\n\t\t\t},this);                                                                                                           // 2233\n\t\t}                                                                                                                   // 2234\n\t});                                                                                                                  // 2235\n                                                                                                                      // 2236\n                                                                                                                      // 2237\n}).call(this);                                                                                                        // 2238\n(function(){                                                                                                          // 2239\n\t\"use strict\";                                                                                                        // 2240\n                                                                                                                      // 2241\n\tvar root = this,                                                                                                     // 2242\n\t\tChart = root.Chart,                                                                                                 // 2243\n\t\t//Cache a local reference to Chart.helpers                                                                          // 2244\n\t\thelpers = Chart.helpers;                                                                                            // 2245\n                                                                                                                      // 2246\n\tvar defaultConfig = {                                                                                                // 2247\n\t\t//Boolean - Whether we should show a stroke on each segment                                                         // 2248\n\t\tsegmentShowStroke : true,                                                                                           // 2249\n                                                                                                                      // 2250\n\t\t//String - The colour of each segment stroke                                                                        // 2251\n\t\tsegmentStrokeColor : \"#fff\",                                                                                        // 2252\n                                                                                                                      // 2253\n\t\t//Number - The width of each segment stroke                                                                         // 2254\n\t\tsegmentStrokeWidth : 2,                                                                                             // 2255\n                                                                                                                      // 2256\n\t\t//The percentage of the chart that we cut out of the middle.                                                        // 2257\n\t\tpercentageInnerCutout : 50,                                                                                         // 2258\n                                                                                                                      // 2259\n\t\t//Number - Amount of animation steps                                                                                // 2260\n\t\tanimationSteps : 100,                                                                                               // 2261\n                                                                                                                      // 2262\n\t\t//String - Animation easing effect                                                                                  // 2263\n\t\tanimationEasing : \"easeOutBounce\",                                                                                  // 2264\n                                                                                                                      // 2265\n\t\t//Boolean - Whether we animate the rotation of the Doughnut                                                         // 2266\n\t\tanimateRotate : true,                                                                                               // 2267\n                                                                                                                      // 2268\n\t\t//Boolean - Whether we animate scaling the Doughnut from the centre                                                 // 2269\n\t\tanimateScale : false,                                                                                               // 2270\n                                                                                                                      // 2271\n\t\t//String - A legend template                                                                                        // 2272\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\n                                                                                                                      // 2274\n\t};                                                                                                                   // 2275\n                                                                                                                      // 2276\n                                                                                                                      // 2277\n\tChart.Type.extend({                                                                                                  // 2278\n\t\t//Passing in a name registers this chart in the Chart namespace                                                     // 2279\n\t\tname: \"Doughnut\",                                                                                                   // 2280\n\t\t//Providing a defaults will also register the deafults in the chart namespace                                       // 2281\n\t\tdefaults : defaultConfig,                                                                                           // 2282\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter                              // 2283\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options                          // 2284\n\t\tinitialize:  function(data){                                                                                        // 2285\n                                                                                                                      // 2286\n\t\t\t//Declare segments as a static property to prevent inheriting across the Chart type prototype                      // 2287\n\t\t\tthis.segments = [];                                                                                                // 2288\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;      // 2289\n                                                                                                                      // 2290\n\t\t\tthis.SegmentArc = Chart.Arc.extend({                                                                               // 2291\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 2292\n\t\t\t\tx : this.chart.width/2,                                                                                           // 2293\n\t\t\t\ty : this.chart.height/2                                                                                           // 2294\n\t\t\t});                                                                                                                // 2295\n                                                                                                                      // 2296\n\t\t\t//Set up tooltip events on the chart                                                                               // 2297\n\t\t\tif (this.options.showTooltips){                                                                                    // 2298\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){                                               // 2299\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];                              // 2300\n                                                                                                                      // 2301\n\t\t\t\t\thelpers.each(this.segments,function(segment){                                                                    // 2302\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);                                                                                 // 2303\n\t\t\t\t\t});                                                                                                              // 2304\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){                                                             // 2305\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;                                                         // 2306\n\t\t\t\t\t});                                                                                                              // 2307\n\t\t\t\t\tthis.showTooltip(activeSegments);                                                                                // 2308\n\t\t\t\t});                                                                                                               // 2309\n\t\t\t}                                                                                                                  // 2310\n\t\t\tthis.calculateTotal(data);                                                                                         // 2311\n                                                                                                                      // 2312\n\t\t\thelpers.each(data,function(datapoint, index){                                                                      // 2313\n\t\t\t\tthis.addData(datapoint, index, true);                                                                             // 2314\n\t\t\t},this);                                                                                                           // 2315\n                                                                                                                      // 2316\n\t\t\tthis.render();                                                                                                     // 2317\n\t\t},                                                                                                                  // 2318\n\t\tgetSegmentsAtEvent : function(e){                                                                                   // 2319\n\t\t\tvar segmentsArray = [];                                                                                            // 2320\n                                                                                                                      // 2321\n\t\t\tvar location = helpers.getRelativePosition(e);                                                                     // 2322\n                                                                                                                      // 2323\n\t\t\thelpers.each(this.segments,function(segment){                                                                      // 2324\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);                                          // 2325\n\t\t\t},this);                                                                                                           // 2326\n\t\t\treturn segmentsArray;                                                                                              // 2327\n\t\t},                                                                                                                  // 2328\n\t\taddData : function(segment, atIndex, silent){                                                                       // 2329\n\t\t\tvar index = atIndex || this.segments.length;                                                                       // 2330\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({                                                               // 2331\n\t\t\t\tvalue : segment.value,                                                                                            // 2332\n\t\t\t\touterRadius : (this.options.animateScale) ? 0 : this.outerRadius,                                                 // 2333\n\t\t\t\tinnerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,      // 2334\n\t\t\t\tfillColor : segment.color,                                                                                        // 2335\n\t\t\t\thighlightColor : segment.highlight || segment.color,                                                              // 2336\n\t\t\t\tshowStroke : this.options.segmentShowStroke,                                                                      // 2337\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,                                                                    // 2338\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,                                                                    // 2339\n\t\t\t\tstartAngle : Math.PI * 1.5,                                                                                       // 2340\n\t\t\t\tcircumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),                    // 2341\n\t\t\t\tlabel : segment.label                                                                                             // 2342\n\t\t\t}));                                                                                                               // 2343\n\t\t\tif (!silent){                                                                                                      // 2344\n\t\t\t\tthis.reflow();                                                                                                    // 2345\n\t\t\t\tthis.update();                                                                                                    // 2346\n\t\t\t}                                                                                                                  // 2347\n\t\t},                                                                                                                  // 2348\n\t\tcalculateCircumference : function(value){                                                                           // 2349\n\t\t\treturn (Math.PI*2)*(value / this.total);                                                                           // 2350\n\t\t},                                                                                                                  // 2351\n\t\tcalculateTotal : function(data){                                                                                    // 2352\n\t\t\tthis.total = 0;                                                                                                    // 2353\n\t\t\thelpers.each(data,function(segment){                                                                               // 2354\n\t\t\t\tthis.total += segment.value;                                                                                      // 2355\n\t\t\t},this);                                                                                                           // 2356\n\t\t},                                                                                                                  // 2357\n\t\tupdate : function(){                                                                                                // 2358\n\t\t\tthis.calculateTotal(this.segments);                                                                                // 2359\n                                                                                                                      // 2360\n\t\t\t// Reset any highlight colours before updating.                                                                    // 2361\n\t\t\thelpers.each(this.activeElements, function(activeElement){                                                         // 2362\n\t\t\t\tactiveElement.restore(['fillColor']);                                                                             // 2363\n\t\t\t});                                                                                                                // 2364\n                                                                                                                      // 2365\n\t\t\thelpers.each(this.segments,function(segment){                                                                      // 2366\n\t\t\t\tsegment.save();                                                                                                   // 2367\n\t\t\t});                                                                                                                // 2368\n\t\t\tthis.render();                                                                                                     // 2369\n\t\t},                                                                                                                  // 2370\n                                                                                                                      // 2371\n\t\tremoveData: function(atIndex){                                                                                      // 2372\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;                                // 2373\n\t\t\tthis.segments.splice(indexToDelete, 1);                                                                            // 2374\n\t\t\tthis.reflow();                                                                                                     // 2375\n\t\t\tthis.update();                                                                                                     // 2376\n\t\t},                                                                                                                  // 2377\n                                                                                                                      // 2378\n\t\treflow : function(){                                                                                                // 2379\n\t\t\thelpers.extend(this.SegmentArc.prototype,{                                                                         // 2380\n\t\t\t\tx : this.chart.width/2,                                                                                           // 2381\n\t\t\t\ty : this.chart.height/2                                                                                           // 2382\n\t\t\t});                                                                                                                // 2383\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;      // 2384\n\t\t\thelpers.each(this.segments, function(segment){                                                                     // 2385\n\t\t\t\tsegment.update({                                                                                                  // 2386\n\t\t\t\t\touterRadius : this.outerRadius,                                                                                  // 2387\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout                                        // 2388\n\t\t\t\t});                                                                                                               // 2389\n\t\t\t}, this);                                                                                                          // 2390\n\t\t},                                                                                                                  // 2391\n\t\tdraw : function(easeDecimal){                                                                                       // 2392\n\t\t\tvar animDecimal = (easeDecimal) ? easeDecimal : 1;                                                                 // 2393\n\t\t\tthis.clear();                                                                                                      // 2394\n\t\t\thelpers.each(this.segments,function(segment,index){                                                                // 2395\n\t\t\t\tsegment.transition({                                                                                              // 2396\n\t\t\t\t\tcircumference : this.calculateCircumference(segment.value),                                                      // 2397\n\t\t\t\t\touterRadius : this.outerRadius,                                                                                  // 2398\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout                                        // 2399\n\t\t\t\t},animDecimal);                                                                                                   // 2400\n                                                                                                                      // 2401\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;                                                    // 2402\n                                                                                                                      // 2403\n\t\t\t\tsegment.draw();                                                                                                   // 2404\n\t\t\t\tif (index === 0){                                                                                                 // 2405\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;                                                                              // 2406\n\t\t\t\t}                                                                                                                 // 2407\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle                           // 2408\n\t\t\t\tif (index < this.segments.length-1){                                                                              // 2409\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;                                                            // 2410\n\t\t\t\t}                                                                                                                 // 2411\n\t\t\t},this);                                                                                                           // 2412\n                                                                                                                      // 2413\n\t\t}                                                                                                                   // 2414\n\t});                                                                                                                  // 2415\n                                                                                                                      // 2416\n\tChart.types.Doughnut.extend({                                                                                        // 2417\n\t\tname : \"Pie\",                                                                                                       // 2418\n\t\tdefaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})                                                 // 2419\n\t});                                                                                                                  // 2420\n                                                                                                                      // 2421\n}).call(this);                                                                                                        // 2422\n(function(){                                                                                                          // 2423\n\t\"use strict\";                                                                                                        // 2424\n                                                                                                                      // 2425\n\tvar root = this,                                                                                                     // 2426\n\t\tChart = root.Chart,                                                                                                 // 2427\n\t\thelpers = Chart.helpers;                                                                                            // 2428\n                                                                                                                      // 2429\n\tvar defaultConfig = {                                                                                                // 2430\n                                                                                                                      // 2431\n\t\t///Boolean - Whether grid lines are shown across the chart                                                          // 2432\n\t\tscaleShowGridLines : true,                                                                                          // 2433\n                                                                                                                      // 2434\n\t\t//String - Colour of the grid lines                                                                                 // 2435\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",                                                                             // 2436\n                                                                                                                      // 2437\n\t\t//Number - Width of the grid lines                                                                                  // 2438\n\t\tscaleGridLineWidth : 1,                                                                                             // 2439\n                                                                                                                      // 2440\n\t\t//Boolean - Whether the line is curved between points                                                               // 2441\n\t\tbezierCurve : true,                                                                                                 // 2442\n                                                                                                                      // 2443\n\t\t//Number - Tension of the bezier curve between points                                                               // 2444\n\t\tbezierCurveTension : 0.4,                                                                                           // 2445\n                                                                                                                      // 2446\n\t\t//Boolean - Whether to show a dot for each point                                                                    // 2447\n\t\tpointDot : true,                                                                                                    // 2448\n                                                                                                                      // 2449\n\t\t//Number - Radius of each point dot in pixels                                                                       // 2450\n\t\tpointDotRadius : 4,                                                                                                 // 2451\n                                                                                                                      // 2452\n\t\t//Number - Pixel width of point dot stroke                                                                          // 2453\n\t\tpointDotStrokeWidth : 1,                                                                                            // 2454\n                                                                                                                      // 2455\n\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point                     // 2456\n\t\tpointHitDetectionRadius : 20,                                                                                       // 2457\n                                                                                                                      // 2458\n\t\t//Boolean - Whether to show a stroke for datasets                                                                   // 2459\n\t\tdatasetStroke : true,                                                                                               // 2460\n                                                                                                                      // 2461\n\t\t//Number - Pixel width of dataset stroke                                                                            // 2462\n\t\tdatasetStrokeWidth : 2,                                                                                             // 2463\n                                                                                                                      // 2464\n\t\t//Boolean - Whether to fill the dataset with a colour                                                               // 2465\n\t\tdatasetFill : true,                                                                                                 // 2466\n                                                                                                                      // 2467\n\t\t//String - A legend template                                                                                        // 2468\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n                                                                                                                      // 2470\n\t};                                                                                                                   // 2471\n                                                                                                                      // 2472\n                                                                                                                      // 2473\n\tChart.Type.extend({                                                                                                  // 2474\n\t\tname: \"Line\",                                                                                                       // 2475\n\t\tdefaults : defaultConfig,                                                                                           // 2476\n\t\tinitialize:  function(data){                                                                                        // 2477\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor                // 2478\n\t\t\tthis.PointClass = Chart.Point.extend({                                                                             // 2479\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,                                                                   // 2480\n\t\t\t\tradius : this.options.pointDotRadius,                                                                             // 2481\n\t\t\t\tdisplay: this.options.pointDot,                                                                                   // 2482\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,                                                        // 2483\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 2484\n\t\t\t\tinRange : function(mouseX){                                                                                       // 2485\n\t\t\t\t\treturn (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));                         // 2486\n\t\t\t\t}                                                                                                                 // 2487\n\t\t\t});                                                                                                                // 2488\n                                                                                                                      // 2489\n\t\t\tthis.datasets = [];                                                                                                // 2490\n                                                                                                                      // 2491\n\t\t\t//Set up tooltip events on the chart                                                                               // 2492\n\t\t\tif (this.options.showTooltips){                                                                                    // 2493\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){                                               // 2494\n\t\t\t\t\tvar activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];                                  // 2495\n\t\t\t\t\tthis.eachPoints(function(point){                                                                                 // 2496\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);                                                                    // 2497\n\t\t\t\t\t});                                                                                                              // 2498\n\t\t\t\t\thelpers.each(activePoints, function(activePoint){                                                                // 2499\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;                                                              // 2500\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;                                                          // 2501\n\t\t\t\t\t});                                                                                                              // 2502\n\t\t\t\t\tthis.showTooltip(activePoints);                                                                                  // 2503\n\t\t\t\t});                                                                                                               // 2504\n\t\t\t}                                                                                                                  // 2505\n                                                                                                                      // 2506\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart                                // 2507\n\t\t\thelpers.each(data.datasets,function(dataset){                                                                      // 2508\n                                                                                                                      // 2509\n\t\t\t\tvar datasetObject = {                                                                                             // 2510\n\t\t\t\t\tlabel : dataset.label || null,                                                                                   // 2511\n\t\t\t\t\tfillColor : dataset.fillColor,                                                                                   // 2512\n\t\t\t\t\tstrokeColor : dataset.strokeColor,                                                                               // 2513\n\t\t\t\t\tpointColor : dataset.pointColor,                                                                                 // 2514\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,                                                                     // 2515\n\t\t\t\t\tpoints : []                                                                                                      // 2516\n\t\t\t\t};                                                                                                                // 2517\n                                                                                                                      // 2518\n\t\t\t\tthis.datasets.push(datasetObject);                                                                                // 2519\n                                                                                                                      // 2520\n                                                                                                                      // 2521\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){                                                              // 2522\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.                                     // 2523\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({                                                                  // 2524\n\t\t\t\t\t\tvalue : dataPoint,                                                                                              // 2525\n\t\t\t\t\t\tlabel : data.labels[index],                                                                                     // 2526\n\t\t\t\t\t\tdatasetLabel: dataset.label,                                                                                    // 2527\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,                                                                         // 2528\n\t\t\t\t\t\tfillColor : dataset.pointColor,                                                                                 // 2529\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,                                               // 2530\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor                                      // 2531\n\t\t\t\t\t}));                                                                                                             // 2532\n\t\t\t\t},this);                                                                                                          // 2533\n                                                                                                                      // 2534\n\t\t\t\tthis.buildScale(data.labels);                                                                                     // 2535\n                                                                                                                      // 2536\n                                                                                                                      // 2537\n\t\t\t\tthis.eachPoints(function(point, index){                                                                           // 2538\n\t\t\t\t\thelpers.extend(point, {                                                                                          // 2539\n\t\t\t\t\t\tx: this.scale.calculateX(index),                                                                                // 2540\n\t\t\t\t\t\ty: this.scale.endPoint                                                                                          // 2541\n\t\t\t\t\t});                                                                                                              // 2542\n\t\t\t\t\tpoint.save();                                                                                                    // 2543\n\t\t\t\t}, this);                                                                                                         // 2544\n                                                                                                                      // 2545\n\t\t\t},this);                                                                                                           // 2546\n                                                                                                                      // 2547\n                                                                                                                      // 2548\n\t\t\tthis.render();                                                                                                     // 2549\n\t\t},                                                                                                                  // 2550\n\t\tupdate : function(){                                                                                                // 2551\n\t\t\tthis.scale.update();                                                                                               // 2552\n\t\t\t// Reset any highlight colours before updating.                                                                    // 2553\n\t\t\thelpers.each(this.activeElements, function(activeElement){                                                         // 2554\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);                                                              // 2555\n\t\t\t});                                                                                                                // 2556\n\t\t\tthis.eachPoints(function(point){                                                                                   // 2557\n\t\t\t\tpoint.save();                                                                                                     // 2558\n\t\t\t});                                                                                                                // 2559\n\t\t\tthis.render();                                                                                                     // 2560\n\t\t},                                                                                                                  // 2561\n\t\teachPoints : function(callback){                                                                                    // 2562\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 2563\n\t\t\t\thelpers.each(dataset.points,callback,this);                                                                       // 2564\n\t\t\t},this);                                                                                                           // 2565\n\t\t},                                                                                                                  // 2566\n\t\tgetPointsAtEvent : function(e){                                                                                     // 2567\n\t\t\tvar pointsArray = [],                                                                                              // 2568\n\t\t\t\teventPosition = helpers.getRelativePosition(e);                                                                   // 2569\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 2570\n\t\t\t\thelpers.each(dataset.points,function(point){                                                                      // 2571\n\t\t\t\t\tif (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);                                     // 2572\n\t\t\t\t});                                                                                                               // 2573\n\t\t\t},this);                                                                                                           // 2574\n\t\t\treturn pointsArray;                                                                                                // 2575\n\t\t},                                                                                                                  // 2576\n\t\tbuildScale : function(labels){                                                                                      // 2577\n\t\t\tvar self = this;                                                                                                   // 2578\n                                                                                                                      // 2579\n\t\t\tvar dataTotal = function(){                                                                                        // 2580\n\t\t\t\tvar values = [];                                                                                                  // 2581\n\t\t\t\tself.eachPoints(function(point){                                                                                  // 2582\n\t\t\t\t\tvalues.push(point.value);                                                                                        // 2583\n\t\t\t\t});                                                                                                               // 2584\n                                                                                                                      // 2585\n\t\t\t\treturn values;                                                                                                    // 2586\n\t\t\t};                                                                                                                 // 2587\n                                                                                                                      // 2588\n\t\t\tvar scaleOptions = {                                                                                               // 2589\n\t\t\t\ttemplateString : this.options.scaleLabel,                                                                         // 2590\n\t\t\t\theight : this.chart.height,                                                                                       // 2591\n\t\t\t\twidth : this.chart.width,                                                                                         // 2592\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 2593\n\t\t\t\ttextColor : this.options.scaleFontColor,                                                                          // 2594\n\t\t\t\tfontSize : this.options.scaleFontSize,                                                                            // 2595\n\t\t\t\tfontStyle : this.options.scaleFontStyle,                                                                          // 2596\n\t\t\t\tfontFamily : this.options.scaleFontFamily,                                                                        // 2597\n\t\t\t\tvaluesCount : labels.length,                                                                                      // 2598\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,                                                                      // 2599\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,                                                                    // 2600\n\t\t\t\tcalculateYRange : function(currentHeight){                                                                        // 2601\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(                                                                 // 2602\n\t\t\t\t\t\tdataTotal(),                                                                                                    // 2603\n\t\t\t\t\t\tcurrentHeight,                                                                                                  // 2604\n\t\t\t\t\t\tthis.fontSize,                                                                                                  // 2605\n\t\t\t\t\t\tthis.beginAtZero,                                                                                               // 2606\n\t\t\t\t\t\tthis.integersOnly                                                                                               // 2607\n\t\t\t\t\t);                                                                                                               // 2608\n\t\t\t\t\thelpers.extend(this, updatedRanges);                                                                             // 2609\n\t\t\t\t},                                                                                                                // 2610\n\t\t\t\txLabels : labels,                                                                                                 // 2611\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily), // 2612\n\t\t\t\tlineWidth : this.options.scaleLineWidth,                                                                          // 2613\n\t\t\t\tlineColor : this.options.scaleLineColor,                                                                          // 2614\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,                          // 2615\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",            // 2616\n\t\t\t\tpadding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,           // 2617\n\t\t\t\tshowLabels : this.options.scaleShowLabels,                                                                        // 2618\n\t\t\t\tdisplay : this.options.showScale                                                                                  // 2619\n\t\t\t};                                                                                                                 // 2620\n                                                                                                                      // 2621\n\t\t\tif (this.options.scaleOverride){                                                                                   // 2622\n\t\t\t\thelpers.extend(scaleOptions, {                                                                                    // 2623\n\t\t\t\t\tcalculateYRange: helpers.noop,                                                                                   // 2624\n\t\t\t\t\tsteps: this.options.scaleSteps,                                                                                  // 2625\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,                                                                          // 2626\n\t\t\t\t\tmin: this.options.scaleStartValue,                                                                               // 2627\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)                      // 2628\n\t\t\t\t});                                                                                                               // 2629\n\t\t\t}                                                                                                                  // 2630\n                                                                                                                      // 2631\n                                                                                                                      // 2632\n\t\t\tthis.scale = new Chart.Scale(scaleOptions);                                                                        // 2633\n\t\t},                                                                                                                  // 2634\n\t\taddData : function(valuesArray,label){                                                                              // 2635\n\t\t\t//Map the values array for each of the datasets                                                                    // 2636\n                                                                                                                      // 2637\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){                                                             // 2638\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.                                      // 2639\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({                                                     // 2640\n\t\t\t\t\tvalue : value,                                                                                                   // 2641\n\t\t\t\t\tlabel : label,                                                                                                   // 2642\n\t\t\t\t\tx: this.scale.calculateX(this.scale.valuesCount+1),                                                              // 2643\n\t\t\t\t\ty: this.scale.endPoint,                                                                                          // 2644\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,                                                      // 2645\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor                                                               // 2646\n\t\t\t\t}));                                                                                                              // 2647\n\t\t\t},this);                                                                                                           // 2648\n                                                                                                                      // 2649\n\t\t\tthis.scale.addXLabel(label);                                                                                       // 2650\n\t\t\t//Then re-render the chart.                                                                                        // 2651\n\t\t\tthis.update();                                                                                                     // 2652\n\t\t},                                                                                                                  // 2653\n\t\tremoveData : function(){                                                                                            // 2654\n\t\t\tthis.scale.removeXLabel();                                                                                         // 2655\n\t\t\t//Then re-render the chart.                                                                                        // 2656\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 2657\n\t\t\t\tdataset.points.shift();                                                                                           // 2658\n\t\t\t},this);                                                                                                           // 2659\n\t\t\tthis.update();                                                                                                     // 2660\n\t\t},                                                                                                                  // 2661\n\t\treflow : function(){                                                                                                // 2662\n\t\t\tvar newScaleProps = helpers.extend({                                                                               // 2663\n\t\t\t\theight : this.chart.height,                                                                                       // 2664\n\t\t\t\twidth : this.chart.width                                                                                          // 2665\n\t\t\t});                                                                                                                // 2666\n\t\t\tthis.scale.update(newScaleProps);                                                                                  // 2667\n\t\t},                                                                                                                  // 2668\n\t\tdraw : function(ease){                                                                                              // 2669\n\t\t\tvar easingDecimal = ease || 1;                                                                                     // 2670\n\t\t\tthis.clear();                                                                                                      // 2671\n                                                                                                                      // 2672\n\t\t\tvar ctx = this.chart.ctx;                                                                                          // 2673\n                                                                                                                      // 2674\n\t\t\t// Some helper methods for getting the next/prev points                                                            // 2675\n\t\t\tvar hasValue = function(item){                                                                                     // 2676\n\t\t\t\treturn item.value !== null;                                                                                       // 2677\n\t\t\t},                                                                                                                 // 2678\n\t\t\tnextPoint = function(point, collection, index){                                                                    // 2679\n\t\t\t\treturn helpers.findNextWhere(collection, hasValue, index) || point;                                               // 2680\n\t\t\t},                                                                                                                 // 2681\n\t\t\tpreviousPoint = function(point, collection, index){                                                                // 2682\n\t\t\t\treturn helpers.findPreviousWhere(collection, hasValue, index) || point;                                           // 2683\n\t\t\t};                                                                                                                 // 2684\n                                                                                                                      // 2685\n\t\t\tthis.scale.draw(easingDecimal);                                                                                    // 2686\n                                                                                                                      // 2687\n                                                                                                                      // 2688\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 2689\n\t\t\t\tvar pointsWithValues = helpers.where(dataset.points, hasValue);                                                   // 2690\n                                                                                                                      // 2691\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync                                // 2692\n\t\t\t\t//We can use this extra loop to calculate the control points of this dataset also in this loop                    // 2693\n                                                                                                                      // 2694\n\t\t\t\thelpers.each(dataset.points, function(point, index){                                                              // 2695\n\t\t\t\t\tif (point.hasValue()){                                                                                           // 2696\n\t\t\t\t\t\tpoint.transition({                                                                                              // 2697\n\t\t\t\t\t\t\ty : this.scale.calculateY(point.value),                                                                        // 2698\n\t\t\t\t\t\t\tx : this.scale.calculateX(index)                                                                               // 2699\n\t\t\t\t\t\t}, easingDecimal);                                                                                              // 2700\n\t\t\t\t\t}                                                                                                                // 2701\n\t\t\t\t},this);                                                                                                          // 2702\n                                                                                                                      // 2703\n                                                                                                                      // 2704\n\t\t\t\t// Control points need to be calculated in a seperate loop, because we need to know the current x/y of the point  // 2705\n\t\t\t\t// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed\n\t\t\t\tif (this.options.bezierCurve){                                                                                    // 2707\n\t\t\t\t\thelpers.each(pointsWithValues, function(point, index){                                                           // 2708\n\t\t\t\t\t\tvar tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;         // 2709\n\t\t\t\t\t\tpoint.controlPoints = helpers.splineCurve(                                                                      // 2710\n\t\t\t\t\t\t\tpreviousPoint(point, pointsWithValues, index),                                                                 // 2711\n\t\t\t\t\t\t\tpoint,                                                                                                         // 2712\n\t\t\t\t\t\t\tnextPoint(point, pointsWithValues, index),                                                                     // 2713\n\t\t\t\t\t\t\ttension                                                                                                        // 2714\n\t\t\t\t\t\t);                                                                                                              // 2715\n                                                                                                                      // 2716\n\t\t\t\t\t\t// Prevent the bezier going outside of the bounds of the graph                                                  // 2717\n                                                                                                                      // 2718\n\t\t\t\t\t\t// Cap puter bezier handles to the upper/lower scale bounds                                                     // 2719\n\t\t\t\t\t\tif (point.controlPoints.outer.y > this.scale.endPoint){                                                         // 2720\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.endPoint;                                                             // 2721\n\t\t\t\t\t\t}                                                                                                               // 2722\n\t\t\t\t\t\telse if (point.controlPoints.outer.y < this.scale.startPoint){                                                  // 2723\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.startPoint;                                                           // 2724\n\t\t\t\t\t\t}                                                                                                               // 2725\n                                                                                                                      // 2726\n\t\t\t\t\t\t// Cap inner bezier handles to the upper/lower scale bounds                                                     // 2727\n\t\t\t\t\t\tif (point.controlPoints.inner.y > this.scale.endPoint){                                                         // 2728\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.endPoint;                                                             // 2729\n\t\t\t\t\t\t}                                                                                                               // 2730\n\t\t\t\t\t\telse if (point.controlPoints.inner.y < this.scale.startPoint){                                                  // 2731\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.startPoint;                                                           // 2732\n\t\t\t\t\t\t}                                                                                                               // 2733\n\t\t\t\t\t},this);                                                                                                         // 2734\n\t\t\t\t}                                                                                                                 // 2735\n                                                                                                                      // 2736\n                                                                                                                      // 2737\n\t\t\t\t//Draw the line between all the points                                                                            // 2738\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;                                                                  // 2739\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;                                                                            // 2740\n\t\t\t\tctx.beginPath();                                                                                                  // 2741\n                                                                                                                      // 2742\n\t\t\t\thelpers.each(pointsWithValues, function(point, index){                                                            // 2743\n\t\t\t\t\tif (index === 0){                                                                                                // 2744\n\t\t\t\t\t\tctx.moveTo(point.x, point.y);                                                                                   // 2745\n\t\t\t\t\t}                                                                                                                // 2746\n\t\t\t\t\telse{                                                                                                            // 2747\n\t\t\t\t\t\tif(this.options.bezierCurve){                                                                                   // 2748\n\t\t\t\t\t\t\tvar previous = previousPoint(point, pointsWithValues, index);                                                  // 2749\n                                                                                                                      // 2750\n\t\t\t\t\t\t\tctx.bezierCurveTo(                                                                                             // 2751\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.x,                                                                               // 2752\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.y,                                                                               // 2753\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.x,                                                                                  // 2754\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y,                                                                                  // 2755\n\t\t\t\t\t\t\t\tpoint.x,                                                                                                      // 2756\n\t\t\t\t\t\t\t\tpoint.y                                                                                                       // 2757\n\t\t\t\t\t\t\t);                                                                                                             // 2758\n\t\t\t\t\t\t}                                                                                                               // 2759\n\t\t\t\t\t\telse{                                                                                                           // 2760\n\t\t\t\t\t\t\tctx.lineTo(point.x,point.y);                                                                                   // 2761\n\t\t\t\t\t\t}                                                                                                               // 2762\n\t\t\t\t\t}                                                                                                                // 2763\n\t\t\t\t}, this);                                                                                                         // 2764\n                                                                                                                      // 2765\n\t\t\t\tctx.stroke();                                                                                                     // 2766\n                                                                                                                      // 2767\n\t\t\t\tif (this.options.datasetFill && pointsWithValues.length > 0){                                                     // 2768\n\t\t\t\t\t//Round off the line by going to the base of the chart, back to the start, then fill.                            // 2769\n\t\t\t\t\tctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);                                // 2770\n\t\t\t\t\tctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);                                                          // 2771\n\t\t\t\t\tctx.fillStyle = dataset.fillColor;                                                                               // 2772\n\t\t\t\t\tctx.closePath();                                                                                                 // 2773\n\t\t\t\t\tctx.fill();                                                                                                      // 2774\n\t\t\t\t}                                                                                                                 // 2775\n                                                                                                                      // 2776\n\t\t\t\t//Now draw the points over the line                                                                               // 2777\n\t\t\t\t//A little inefficient double looping, but better than the line                                                   // 2778\n\t\t\t\t//lagging behind the point positions                                                                              // 2779\n\t\t\t\thelpers.each(pointsWithValues,function(point){                                                                    // 2780\n\t\t\t\t\tpoint.draw();                                                                                                    // 2781\n\t\t\t\t});                                                                                                               // 2782\n\t\t\t},this);                                                                                                           // 2783\n\t\t}                                                                                                                   // 2784\n\t});                                                                                                                  // 2785\n                                                                                                                      // 2786\n                                                                                                                      // 2787\n}).call(this);                                                                                                        // 2788\n(function(){                                                                                                          // 2789\n\t\"use strict\";                                                                                                        // 2790\n                                                                                                                      // 2791\n\tvar root = this,                                                                                                     // 2792\n\t\tChart = root.Chart,                                                                                                 // 2793\n\t\t//Cache a local reference to Chart.helpers                                                                          // 2794\n\t\thelpers = Chart.helpers;                                                                                            // 2795\n                                                                                                                      // 2796\n\tvar defaultConfig = {                                                                                                // 2797\n\t\t//Boolean - Show a backdrop to the scale label                                                                      // 2798\n\t\tscaleShowLabelBackdrop : true,                                                                                      // 2799\n                                                                                                                      // 2800\n\t\t//String - The colour of the label backdrop                                                                         // 2801\n\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",                                                                      // 2802\n                                                                                                                      // 2803\n\t\t// Boolean - Whether the scale should begin at zero                                                                 // 2804\n\t\tscaleBeginAtZero : true,                                                                                            // 2805\n                                                                                                                      // 2806\n\t\t//Number - The backdrop padding above & below the label in pixels                                                   // 2807\n\t\tscaleBackdropPaddingY : 2,                                                                                          // 2808\n                                                                                                                      // 2809\n\t\t//Number - The backdrop padding to the side of the label in pixels                                                  // 2810\n\t\tscaleBackdropPaddingX : 2,                                                                                          // 2811\n                                                                                                                      // 2812\n\t\t//Boolean - Show line for each value in the scale                                                                   // 2813\n\t\tscaleShowLine : true,                                                                                               // 2814\n                                                                                                                      // 2815\n\t\t//Boolean - Stroke a line around each segment in the chart                                                          // 2816\n\t\tsegmentShowStroke : true,                                                                                           // 2817\n                                                                                                                      // 2818\n\t\t//String - The colour of the stroke on each segement.                                                               // 2819\n\t\tsegmentStrokeColor : \"#fff\",                                                                                        // 2820\n                                                                                                                      // 2821\n\t\t//Number - The width of the stroke value in pixels                                                                  // 2822\n\t\tsegmentStrokeWidth : 2,                                                                                             // 2823\n                                                                                                                      // 2824\n\t\t//Number - Amount of animation steps                                                                                // 2825\n\t\tanimationSteps : 100,                                                                                               // 2826\n                                                                                                                      // 2827\n\t\t//String - Animation easing effect.                                                                                 // 2828\n\t\tanimationEasing : \"easeOutBounce\",                                                                                  // 2829\n                                                                                                                      // 2830\n\t\t//Boolean - Whether to animate the rotation of the chart                                                            // 2831\n\t\tanimateRotate : true,                                                                                               // 2832\n                                                                                                                      // 2833\n\t\t//Boolean - Whether to animate scaling the chart from the centre                                                    // 2834\n\t\tanimateScale : false,                                                                                               // 2835\n                                                                                                                      // 2836\n\t\t//String - A legend template                                                                                        // 2837\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\n\t};                                                                                                                   // 2839\n                                                                                                                      // 2840\n                                                                                                                      // 2841\n\tChart.Type.extend({                                                                                                  // 2842\n\t\t//Passing in a name registers this chart in the Chart namespace                                                     // 2843\n\t\tname: \"PolarArea\",                                                                                                  // 2844\n\t\t//Providing a defaults will also register the deafults in the chart namespace                                       // 2845\n\t\tdefaults : defaultConfig,                                                                                           // 2846\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter                              // 2847\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options                          // 2848\n\t\tinitialize:  function(data){                                                                                        // 2849\n\t\t\tthis.segments = [];                                                                                                // 2850\n\t\t\t//Declare segment class as a chart instance specific class, so it can share props for this instance                // 2851\n\t\t\tthis.SegmentArc = Chart.Arc.extend({                                                                               // 2852\n\t\t\t\tshowStroke : this.options.segmentShowStroke,                                                                      // 2853\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,                                                                    // 2854\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,                                                                    // 2855\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 2856\n\t\t\t\tinnerRadius : 0,                                                                                                  // 2857\n\t\t\t\tx : this.chart.width/2,                                                                                           // 2858\n\t\t\t\ty : this.chart.height/2                                                                                           // 2859\n\t\t\t});                                                                                                                // 2860\n\t\t\tthis.scale = new Chart.RadialScale({                                                                               // 2861\n\t\t\t\tdisplay: this.options.showScale,                                                                                  // 2862\n\t\t\t\tfontStyle: this.options.scaleFontStyle,                                                                           // 2863\n\t\t\t\tfontSize: this.options.scaleFontSize,                                                                             // 2864\n\t\t\t\tfontFamily: this.options.scaleFontFamily,                                                                         // 2865\n\t\t\t\tfontColor: this.options.scaleFontColor,                                                                           // 2866\n\t\t\t\tshowLabels: this.options.scaleShowLabels,                                                                         // 2867\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,                                                           // 2868\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,                                                                   // 2869\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,                                                            // 2870\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,                                                             // 2871\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,                                        // 2872\n\t\t\t\tlineColor: this.options.scaleLineColor,                                                                           // 2873\n\t\t\t\tlineArc: true,                                                                                                    // 2874\n\t\t\t\twidth: this.chart.width,                                                                                          // 2875\n\t\t\t\theight: this.chart.height,                                                                                        // 2876\n\t\t\t\txCenter: this.chart.width/2,                                                                                      // 2877\n\t\t\t\tyCenter: this.chart.height/2,                                                                                     // 2878\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 2879\n\t\t\t\ttemplateString: this.options.scaleLabel,                                                                          // 2880\n\t\t\t\tvaluesCount: data.length                                                                                          // 2881\n\t\t\t});                                                                                                                // 2882\n                                                                                                                      // 2883\n\t\t\tthis.updateScaleRange(data);                                                                                       // 2884\n                                                                                                                      // 2885\n\t\t\tthis.scale.update();                                                                                               // 2886\n                                                                                                                      // 2887\n\t\t\thelpers.each(data,function(segment,index){                                                                         // 2888\n\t\t\t\tthis.addData(segment,index,true);                                                                                 // 2889\n\t\t\t},this);                                                                                                           // 2890\n                                                                                                                      // 2891\n\t\t\t//Set up tooltip events on the chart                                                                               // 2892\n\t\t\tif (this.options.showTooltips){                                                                                    // 2893\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){                                               // 2894\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];                              // 2895\n\t\t\t\t\thelpers.each(this.segments,function(segment){                                                                    // 2896\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);                                                                                 // 2897\n\t\t\t\t\t});                                                                                                              // 2898\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){                                                             // 2899\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;                                                         // 2900\n\t\t\t\t\t});                                                                                                              // 2901\n\t\t\t\t\tthis.showTooltip(activeSegments);                                                                                // 2902\n\t\t\t\t});                                                                                                               // 2903\n\t\t\t}                                                                                                                  // 2904\n                                                                                                                      // 2905\n\t\t\tthis.render();                                                                                                     // 2906\n\t\t},                                                                                                                  // 2907\n\t\tgetSegmentsAtEvent : function(e){                                                                                   // 2908\n\t\t\tvar segmentsArray = [];                                                                                            // 2909\n                                                                                                                      // 2910\n\t\t\tvar location = helpers.getRelativePosition(e);                                                                     // 2911\n                                                                                                                      // 2912\n\t\t\thelpers.each(this.segments,function(segment){                                                                      // 2913\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);                                          // 2914\n\t\t\t},this);                                                                                                           // 2915\n\t\t\treturn segmentsArray;                                                                                              // 2916\n\t\t},                                                                                                                  // 2917\n\t\taddData : function(segment, atIndex, silent){                                                                       // 2918\n\t\t\tvar index = atIndex || this.segments.length;                                                                       // 2919\n                                                                                                                      // 2920\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({                                                               // 2921\n\t\t\t\tfillColor: segment.color,                                                                                         // 2922\n\t\t\t\thighlightColor: segment.highlight || segment.color,                                                               // 2923\n\t\t\t\tlabel: segment.label,                                                                                             // 2924\n\t\t\t\tvalue: segment.value,                                                                                             // 2925\n\t\t\t\touterRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),                   // 2926\n\t\t\t\tcircumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),                                  // 2927\n\t\t\t\tstartAngle: Math.PI * 1.5                                                                                         // 2928\n\t\t\t}));                                                                                                               // 2929\n\t\t\tif (!silent){                                                                                                      // 2930\n\t\t\t\tthis.reflow();                                                                                                    // 2931\n\t\t\t\tthis.update();                                                                                                    // 2932\n\t\t\t}                                                                                                                  // 2933\n\t\t},                                                                                                                  // 2934\n\t\tremoveData: function(atIndex){                                                                                      // 2935\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;                                // 2936\n\t\t\tthis.segments.splice(indexToDelete, 1);                                                                            // 2937\n\t\t\tthis.reflow();                                                                                                     // 2938\n\t\t\tthis.update();                                                                                                     // 2939\n\t\t},                                                                                                                  // 2940\n\t\tcalculateTotal: function(data){                                                                                     // 2941\n\t\t\tthis.total = 0;                                                                                                    // 2942\n\t\t\thelpers.each(data,function(segment){                                                                               // 2943\n\t\t\t\tthis.total += segment.value;                                                                                      // 2944\n\t\t\t},this);                                                                                                           // 2945\n\t\t\tthis.scale.valuesCount = this.segments.length;                                                                     // 2946\n\t\t},                                                                                                                  // 2947\n\t\tupdateScaleRange: function(datapoints){                                                                             // 2948\n\t\t\tvar valuesArray = [];                                                                                              // 2949\n\t\t\thelpers.each(datapoints,function(segment){                                                                         // 2950\n\t\t\t\tvaluesArray.push(segment.value);                                                                                  // 2951\n\t\t\t});                                                                                                                // 2952\n                                                                                                                      // 2953\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?                                                                    // 2954\n\t\t\t\t{                                                                                                                 // 2955\n\t\t\t\t\tsteps: this.options.scaleSteps,                                                                                  // 2956\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,                                                                          // 2957\n\t\t\t\t\tmin: this.options.scaleStartValue,                                                                               // 2958\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)                      // 2959\n\t\t\t\t} :                                                                                                               // 2960\n\t\t\t\thelpers.calculateScaleRange(                                                                                      // 2961\n\t\t\t\t\tvaluesArray,                                                                                                     // 2962\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,                                                            // 2963\n\t\t\t\t\tthis.options.scaleFontSize,                                                                                      // 2964\n\t\t\t\t\tthis.options.scaleBeginAtZero,                                                                                   // 2965\n\t\t\t\t\tthis.options.scaleIntegersOnly                                                                                   // 2966\n\t\t\t\t);                                                                                                                // 2967\n                                                                                                                      // 2968\n\t\t\thelpers.extend(                                                                                                    // 2969\n\t\t\t\tthis.scale,                                                                                                       // 2970\n\t\t\t\tscaleSizes,                                                                                                       // 2971\n\t\t\t\t{                                                                                                                 // 2972\n\t\t\t\t\tsize: helpers.min([this.chart.width, this.chart.height]),                                                        // 2973\n\t\t\t\t\txCenter: this.chart.width/2,                                                                                     // 2974\n\t\t\t\t\tyCenter: this.chart.height/2                                                                                     // 2975\n\t\t\t\t}                                                                                                                 // 2976\n\t\t\t);                                                                                                                 // 2977\n                                                                                                                      // 2978\n\t\t},                                                                                                                  // 2979\n\t\tupdate : function(){                                                                                                // 2980\n\t\t\tthis.calculateTotal(this.segments);                                                                                // 2981\n                                                                                                                      // 2982\n\t\t\thelpers.each(this.segments,function(segment){                                                                      // 2983\n\t\t\t\tsegment.save();                                                                                                   // 2984\n\t\t\t});                                                                                                                // 2985\n\t\t\tthis.render();                                                                                                     // 2986\n\t\t},                                                                                                                  // 2987\n\t\treflow : function(){                                                                                                // 2988\n\t\t\thelpers.extend(this.SegmentArc.prototype,{                                                                         // 2989\n\t\t\t\tx : this.chart.width/2,                                                                                           // 2990\n\t\t\t\ty : this.chart.height/2                                                                                           // 2991\n\t\t\t});                                                                                                                // 2992\n\t\t\tthis.updateScaleRange(this.segments);                                                                              // 2993\n\t\t\tthis.scale.update();                                                                                               // 2994\n                                                                                                                      // 2995\n\t\t\thelpers.extend(this.scale,{                                                                                        // 2996\n\t\t\t\txCenter: this.chart.width/2,                                                                                      // 2997\n\t\t\t\tyCenter: this.chart.height/2                                                                                      // 2998\n\t\t\t});                                                                                                                // 2999\n                                                                                                                      // 3000\n\t\t\thelpers.each(this.segments, function(segment){                                                                     // 3001\n\t\t\t\tsegment.update({                                                                                                  // 3002\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)                                                    // 3003\n\t\t\t\t});                                                                                                               // 3004\n\t\t\t}, this);                                                                                                          // 3005\n                                                                                                                      // 3006\n\t\t},                                                                                                                  // 3007\n\t\tdraw : function(ease){                                                                                              // 3008\n\t\t\tvar easingDecimal = ease || 1;                                                                                     // 3009\n\t\t\t//Clear & draw the canvas                                                                                          // 3010\n\t\t\tthis.clear();                                                                                                      // 3011\n\t\t\thelpers.each(this.segments,function(segment, index){                                                               // 3012\n\t\t\t\tsegment.transition({                                                                                              // 3013\n\t\t\t\t\tcircumference : this.scale.getCircumference(),                                                                   // 3014\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)                                                    // 3015\n\t\t\t\t},easingDecimal);                                                                                                 // 3016\n                                                                                                                      // 3017\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;                                                    // 3018\n                                                                                                                      // 3019\n\t\t\t\t// If we've removed the first segment we need to set the first one to                                             // 3020\n\t\t\t\t// start at the top.                                                                                              // 3021\n\t\t\t\tif (index === 0){                                                                                                 // 3022\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;                                                                              // 3023\n\t\t\t\t}                                                                                                                 // 3024\n                                                                                                                      // 3025\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle                           // 3026\n\t\t\t\tif (index < this.segments.length - 1){                                                                            // 3027\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;                                                            // 3028\n\t\t\t\t}                                                                                                                 // 3029\n\t\t\t\tsegment.draw();                                                                                                   // 3030\n\t\t\t}, this);                                                                                                          // 3031\n\t\t\tthis.scale.draw();                                                                                                 // 3032\n\t\t}                                                                                                                   // 3033\n\t});                                                                                                                  // 3034\n                                                                                                                      // 3035\n}).call(this);                                                                                                        // 3036\n(function(){                                                                                                          // 3037\n\t\"use strict\";                                                                                                        // 3038\n                                                                                                                      // 3039\n\tvar root = this,                                                                                                     // 3040\n\t\tChart = root.Chart,                                                                                                 // 3041\n\t\thelpers = Chart.helpers;                                                                                            // 3042\n                                                                                                                      // 3043\n                                                                                                                      // 3044\n                                                                                                                      // 3045\n\tChart.Type.extend({                                                                                                  // 3046\n\t\tname: \"Radar\",                                                                                                      // 3047\n\t\tdefaults:{                                                                                                          // 3048\n\t\t\t//Boolean - Whether to show lines for each scale point                                                             // 3049\n\t\t\tscaleShowLine : true,                                                                                              // 3050\n                                                                                                                      // 3051\n\t\t\t//Boolean - Whether we show the angle lines out of the radar                                                       // 3052\n\t\t\tangleShowLineOut : true,                                                                                           // 3053\n                                                                                                                      // 3054\n\t\t\t//Boolean - Whether to show labels on the scale                                                                    // 3055\n\t\t\tscaleShowLabels : false,                                                                                           // 3056\n                                                                                                                      // 3057\n\t\t\t// Boolean - Whether the scale should begin at zero                                                                // 3058\n\t\t\tscaleBeginAtZero : true,                                                                                           // 3059\n                                                                                                                      // 3060\n\t\t\t//String - Colour of the angle line                                                                                // 3061\n\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",                                                                                 // 3062\n                                                                                                                      // 3063\n\t\t\t//Number - Pixel width of the angle line                                                                           // 3064\n\t\t\tangleLineWidth : 1,                                                                                                // 3065\n                                                                                                                      // 3066\n\t\t\t//String - Point label font declaration                                                                            // 3067\n\t\t\tpointLabelFontFamily : \"'Arial'\",                                                                                  // 3068\n                                                                                                                      // 3069\n\t\t\t//String - Point label font weight                                                                                 // 3070\n\t\t\tpointLabelFontStyle : \"normal\",                                                                                    // 3071\n                                                                                                                      // 3072\n\t\t\t//Number - Point label font size in pixels                                                                         // 3073\n\t\t\tpointLabelFontSize : 10,                                                                                           // 3074\n                                                                                                                      // 3075\n\t\t\t//String - Point label font colour                                                                                 // 3076\n\t\t\tpointLabelFontColor : \"#666\",                                                                                      // 3077\n                                                                                                                      // 3078\n\t\t\t//Boolean - Whether to show a dot for each point                                                                   // 3079\n\t\t\tpointDot : true,                                                                                                   // 3080\n                                                                                                                      // 3081\n\t\t\t//Number - Radius of each point dot in pixels                                                                      // 3082\n\t\t\tpointDotRadius : 3,                                                                                                // 3083\n                                                                                                                      // 3084\n\t\t\t//Number - Pixel width of point dot stroke                                                                         // 3085\n\t\t\tpointDotStrokeWidth : 1,                                                                                           // 3086\n                                                                                                                      // 3087\n\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point                    // 3088\n\t\t\tpointHitDetectionRadius : 20,                                                                                      // 3089\n                                                                                                                      // 3090\n\t\t\t//Boolean - Whether to show a stroke for datasets                                                                  // 3091\n\t\t\tdatasetStroke : true,                                                                                              // 3092\n                                                                                                                      // 3093\n\t\t\t//Number - Pixel width of dataset stroke                                                                           // 3094\n\t\t\tdatasetStrokeWidth : 2,                                                                                            // 3095\n                                                                                                                      // 3096\n\t\t\t//Boolean - Whether to fill the dataset with a colour                                                              // 3097\n\t\t\tdatasetFill : true,                                                                                                // 3098\n                                                                                                                      // 3099\n\t\t\t//String - A legend template                                                                                       // 3100\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n                                                                                                                      // 3102\n\t\t},                                                                                                                  // 3103\n                                                                                                                      // 3104\n\t\tinitialize: function(data){                                                                                         // 3105\n\t\t\tthis.PointClass = Chart.Point.extend({                                                                             // 3106\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,                                                                   // 3107\n\t\t\t\tradius : this.options.pointDotRadius,                                                                             // 3108\n\t\t\t\tdisplay: this.options.pointDot,                                                                                   // 3109\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,                                                        // 3110\n\t\t\t\tctx : this.chart.ctx                                                                                              // 3111\n\t\t\t});                                                                                                                // 3112\n                                                                                                                      // 3113\n\t\t\tthis.datasets = [];                                                                                                // 3114\n                                                                                                                      // 3115\n\t\t\tthis.buildScale(data);                                                                                             // 3116\n                                                                                                                      // 3117\n\t\t\t//Set up tooltip events on the chart                                                                               // 3118\n\t\t\tif (this.options.showTooltips){                                                                                    // 3119\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){                                               // 3120\n\t\t\t\t\tvar activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];                        // 3121\n                                                                                                                      // 3122\n\t\t\t\t\tthis.eachPoints(function(point){                                                                                 // 3123\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);                                                                    // 3124\n\t\t\t\t\t});                                                                                                              // 3125\n\t\t\t\t\thelpers.each(activePointsCollection, function(activePoint){                                                      // 3126\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;                                                              // 3127\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;                                                          // 3128\n\t\t\t\t\t});                                                                                                              // 3129\n                                                                                                                      // 3130\n\t\t\t\t\tthis.showTooltip(activePointsCollection);                                                                        // 3131\n\t\t\t\t});                                                                                                               // 3132\n\t\t\t}                                                                                                                  // 3133\n                                                                                                                      // 3134\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart                                // 3135\n\t\t\thelpers.each(data.datasets,function(dataset){                                                                      // 3136\n                                                                                                                      // 3137\n\t\t\t\tvar datasetObject = {                                                                                             // 3138\n\t\t\t\t\tlabel: dataset.label || null,                                                                                    // 3139\n\t\t\t\t\tfillColor : dataset.fillColor,                                                                                   // 3140\n\t\t\t\t\tstrokeColor : dataset.strokeColor,                                                                               // 3141\n\t\t\t\t\tpointColor : dataset.pointColor,                                                                                 // 3142\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,                                                                     // 3143\n\t\t\t\t\tpoints : []                                                                                                      // 3144\n\t\t\t\t};                                                                                                                // 3145\n                                                                                                                      // 3146\n\t\t\t\tthis.datasets.push(datasetObject);                                                                                // 3147\n                                                                                                                      // 3148\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){                                                              // 3149\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.                                     // 3150\n\t\t\t\t\tvar pointPosition;                                                                                               // 3151\n\t\t\t\t\tif (!this.scale.animation){                                                                                      // 3152\n\t\t\t\t\t\tpointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));                // 3153\n\t\t\t\t\t}                                                                                                                // 3154\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({                                                                  // 3155\n\t\t\t\t\t\tvalue : dataPoint,                                                                                              // 3156\n\t\t\t\t\t\tlabel : data.labels[index],                                                                                     // 3157\n\t\t\t\t\t\tdatasetLabel: dataset.label,                                                                                    // 3158\n\t\t\t\t\t\tx: (this.options.animation) ? this.scale.xCenter : pointPosition.x,                                             // 3159\n\t\t\t\t\t\ty: (this.options.animation) ? this.scale.yCenter : pointPosition.y,                                             // 3160\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,                                                                         // 3161\n\t\t\t\t\t\tfillColor : dataset.pointColor,                                                                                 // 3162\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,                                               // 3163\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor                                      // 3164\n\t\t\t\t\t}));                                                                                                             // 3165\n\t\t\t\t},this);                                                                                                          // 3166\n                                                                                                                      // 3167\n\t\t\t},this);                                                                                                           // 3168\n                                                                                                                      // 3169\n\t\t\tthis.render();                                                                                                     // 3170\n\t\t},                                                                                                                  // 3171\n\t\teachPoints : function(callback){                                                                                    // 3172\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 3173\n\t\t\t\thelpers.each(dataset.points,callback,this);                                                                       // 3174\n\t\t\t},this);                                                                                                           // 3175\n\t\t},                                                                                                                  // 3176\n                                                                                                                      // 3177\n\t\tgetPointsAtEvent : function(evt){                                                                                   // 3178\n\t\t\tvar mousePosition = helpers.getRelativePosition(evt),                                                              // 3179\n\t\t\t\tfromCenter = helpers.getAngleFromPoint({                                                                          // 3180\n\t\t\t\t\tx: this.scale.xCenter,                                                                                           // 3181\n\t\t\t\t\ty: this.scale.yCenter                                                                                            // 3182\n\t\t\t\t}, mousePosition);                                                                                                // 3183\n                                                                                                                      // 3184\n\t\t\tvar anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,                                                         // 3185\n\t\t\t\tpointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),                                      // 3186\n\t\t\t\tactivePointsCollection = [];                                                                                      // 3187\n                                                                                                                      // 3188\n\t\t\t// If we're at the top, make the pointIndex 0 to get the first of the array.                                       // 3189\n\t\t\tif (pointIndex >= this.scale.valuesCount || pointIndex < 0){                                                       // 3190\n\t\t\t\tpointIndex = 0;                                                                                                   // 3191\n\t\t\t}                                                                                                                  // 3192\n                                                                                                                      // 3193\n\t\t\tif (fromCenter.distance <= this.scale.drawingArea){                                                                // 3194\n\t\t\t\thelpers.each(this.datasets, function(dataset){                                                                    // 3195\n\t\t\t\t\tactivePointsCollection.push(dataset.points[pointIndex]);                                                         // 3196\n\t\t\t\t});                                                                                                               // 3197\n\t\t\t}                                                                                                                  // 3198\n                                                                                                                      // 3199\n\t\t\treturn activePointsCollection;                                                                                     // 3200\n\t\t},                                                                                                                  // 3201\n                                                                                                                      // 3202\n\t\tbuildScale : function(data){                                                                                        // 3203\n\t\t\tthis.scale = new Chart.RadialScale({                                                                               // 3204\n\t\t\t\tdisplay: this.options.showScale,                                                                                  // 3205\n\t\t\t\tfontStyle: this.options.scaleFontStyle,                                                                           // 3206\n\t\t\t\tfontSize: this.options.scaleFontSize,                                                                             // 3207\n\t\t\t\tfontFamily: this.options.scaleFontFamily,                                                                         // 3208\n\t\t\t\tfontColor: this.options.scaleFontColor,                                                                           // 3209\n\t\t\t\tshowLabels: this.options.scaleShowLabels,                                                                         // 3210\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,                                                           // 3211\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,                                                                   // 3212\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,                                                            // 3213\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,                                                             // 3214\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,                                        // 3215\n\t\t\t\tlineColor: this.options.scaleLineColor,                                                                           // 3216\n\t\t\t\tangleLineColor : this.options.angleLineColor,                                                                     // 3217\n\t\t\t\tangleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,                               // 3218\n\t\t\t\t// Point labels at the edge of each line                                                                          // 3219\n\t\t\t\tpointLabelFontColor : this.options.pointLabelFontColor,                                                           // 3220\n\t\t\t\tpointLabelFontSize : this.options.pointLabelFontSize,                                                             // 3221\n\t\t\t\tpointLabelFontFamily : this.options.pointLabelFontFamily,                                                         // 3222\n\t\t\t\tpointLabelFontStyle : this.options.pointLabelFontStyle,                                                           // 3223\n\t\t\t\theight : this.chart.height,                                                                                       // 3224\n\t\t\t\twidth: this.chart.width,                                                                                          // 3225\n\t\t\t\txCenter: this.chart.width/2,                                                                                      // 3226\n\t\t\t\tyCenter: this.chart.height/2,                                                                                     // 3227\n\t\t\t\tctx : this.chart.ctx,                                                                                             // 3228\n\t\t\t\ttemplateString: this.options.scaleLabel,                                                                          // 3229\n\t\t\t\tlabels: data.labels,                                                                                              // 3230\n\t\t\t\tvaluesCount: data.datasets[0].data.length                                                                         // 3231\n\t\t\t});                                                                                                                // 3232\n                                                                                                                      // 3233\n\t\t\tthis.scale.setScaleSize();                                                                                         // 3234\n\t\t\tthis.updateScaleRange(data.datasets);                                                                              // 3235\n\t\t\tthis.scale.buildYLabels();                                                                                         // 3236\n\t\t},                                                                                                                  // 3237\n\t\tupdateScaleRange: function(datasets){                                                                               // 3238\n\t\t\tvar valuesArray = (function(){                                                                                     // 3239\n\t\t\t\tvar totalDataArray = [];                                                                                          // 3240\n\t\t\t\thelpers.each(datasets,function(dataset){                                                                          // 3241\n\t\t\t\t\tif (dataset.data){                                                                                               // 3242\n\t\t\t\t\t\ttotalDataArray = totalDataArray.concat(dataset.data);                                                           // 3243\n\t\t\t\t\t}                                                                                                                // 3244\n\t\t\t\t\telse {                                                                                                           // 3245\n\t\t\t\t\t\thelpers.each(dataset.points, function(point){                                                                   // 3246\n\t\t\t\t\t\t\ttotalDataArray.push(point.value);                                                                              // 3247\n\t\t\t\t\t\t});                                                                                                             // 3248\n\t\t\t\t\t}                                                                                                                // 3249\n\t\t\t\t});                                                                                                               // 3250\n\t\t\t\treturn totalDataArray;                                                                                            // 3251\n\t\t\t})();                                                                                                              // 3252\n                                                                                                                      // 3253\n                                                                                                                      // 3254\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?                                                                    // 3255\n\t\t\t\t{                                                                                                                 // 3256\n\t\t\t\t\tsteps: this.options.scaleSteps,                                                                                  // 3257\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,                                                                          // 3258\n\t\t\t\t\tmin: this.options.scaleStartValue,                                                                               // 3259\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)                      // 3260\n\t\t\t\t} :                                                                                                               // 3261\n\t\t\t\thelpers.calculateScaleRange(                                                                                      // 3262\n\t\t\t\t\tvaluesArray,                                                                                                     // 3263\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,                                                            // 3264\n\t\t\t\t\tthis.options.scaleFontSize,                                                                                      // 3265\n\t\t\t\t\tthis.options.scaleBeginAtZero,                                                                                   // 3266\n\t\t\t\t\tthis.options.scaleIntegersOnly                                                                                   // 3267\n\t\t\t\t);                                                                                                                // 3268\n                                                                                                                      // 3269\n\t\t\thelpers.extend(                                                                                                    // 3270\n\t\t\t\tthis.scale,                                                                                                       // 3271\n\t\t\t\tscaleSizes                                                                                                        // 3272\n\t\t\t);                                                                                                                 // 3273\n                                                                                                                      // 3274\n\t\t},                                                                                                                  // 3275\n\t\taddData : function(valuesArray,label){                                                                              // 3276\n\t\t\t//Map the values array for each of the datasets                                                                    // 3277\n\t\t\tthis.scale.valuesCount++;                                                                                          // 3278\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){                                                             // 3279\n\t\t\t\tvar pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value)); // 3280\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({                                                     // 3281\n\t\t\t\t\tvalue : value,                                                                                                   // 3282\n\t\t\t\t\tlabel : label,                                                                                                   // 3283\n\t\t\t\t\tx: pointPosition.x,                                                                                              // 3284\n\t\t\t\t\ty: pointPosition.y,                                                                                              // 3285\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,                                                      // 3286\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor                                                               // 3287\n\t\t\t\t}));                                                                                                              // 3288\n\t\t\t},this);                                                                                                           // 3289\n                                                                                                                      // 3290\n\t\t\tthis.scale.labels.push(label);                                                                                     // 3291\n                                                                                                                      // 3292\n\t\t\tthis.reflow();                                                                                                     // 3293\n                                                                                                                      // 3294\n\t\t\tthis.update();                                                                                                     // 3295\n\t\t},                                                                                                                  // 3296\n\t\tremoveData : function(){                                                                                            // 3297\n\t\t\tthis.scale.valuesCount--;                                                                                          // 3298\n\t\t\tthis.scale.labels.shift();                                                                                         // 3299\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 3300\n\t\t\t\tdataset.points.shift();                                                                                           // 3301\n\t\t\t},this);                                                                                                           // 3302\n\t\t\tthis.reflow();                                                                                                     // 3303\n\t\t\tthis.update();                                                                                                     // 3304\n\t\t},                                                                                                                  // 3305\n\t\tupdate : function(){                                                                                                // 3306\n\t\t\tthis.eachPoints(function(point){                                                                                   // 3307\n\t\t\t\tpoint.save();                                                                                                     // 3308\n\t\t\t});                                                                                                                // 3309\n\t\t\tthis.reflow();                                                                                                     // 3310\n\t\t\tthis.render();                                                                                                     // 3311\n\t\t},                                                                                                                  // 3312\n\t\treflow: function(){                                                                                                 // 3313\n\t\t\thelpers.extend(this.scale, {                                                                                       // 3314\n\t\t\t\twidth : this.chart.width,                                                                                         // 3315\n\t\t\t\theight: this.chart.height,                                                                                        // 3316\n\t\t\t\tsize : helpers.min([this.chart.width, this.chart.height]),                                                        // 3317\n\t\t\t\txCenter: this.chart.width/2,                                                                                      // 3318\n\t\t\t\tyCenter: this.chart.height/2                                                                                      // 3319\n\t\t\t});                                                                                                                // 3320\n\t\t\tthis.updateScaleRange(this.datasets);                                                                              // 3321\n\t\t\tthis.scale.setScaleSize();                                                                                         // 3322\n\t\t\tthis.scale.buildYLabels();                                                                                         // 3323\n\t\t},                                                                                                                  // 3324\n\t\tdraw : function(ease){                                                                                              // 3325\n\t\t\tvar easeDecimal = ease || 1,                                                                                       // 3326\n\t\t\t\tctx = this.chart.ctx;                                                                                             // 3327\n\t\t\tthis.clear();                                                                                                      // 3328\n\t\t\tthis.scale.draw();                                                                                                 // 3329\n                                                                                                                      // 3330\n\t\t\thelpers.each(this.datasets,function(dataset){                                                                      // 3331\n                                                                                                                      // 3332\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync                                // 3333\n\t\t\t\thelpers.each(dataset.points,function(point,index){                                                                // 3334\n\t\t\t\t\tif (point.hasValue()){                                                                                           // 3335\n\t\t\t\t\t\tpoint.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);\n\t\t\t\t\t}                                                                                                                // 3337\n\t\t\t\t},this);                                                                                                          // 3338\n                                                                                                                      // 3339\n                                                                                                                      // 3340\n                                                                                                                      // 3341\n\t\t\t\t//Draw the line between all the points                                                                            // 3342\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;                                                                  // 3343\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;                                                                            // 3344\n\t\t\t\tctx.beginPath();                                                                                                  // 3345\n\t\t\t\thelpers.each(dataset.points,function(point,index){                                                                // 3346\n\t\t\t\t\tif (index === 0){                                                                                                // 3347\n\t\t\t\t\t\tctx.moveTo(point.x,point.y);                                                                                    // 3348\n\t\t\t\t\t}                                                                                                                // 3349\n\t\t\t\t\telse{                                                                                                            // 3350\n\t\t\t\t\t\tctx.lineTo(point.x,point.y);                                                                                    // 3351\n\t\t\t\t\t}                                                                                                                // 3352\n\t\t\t\t},this);                                                                                                          // 3353\n\t\t\t\tctx.closePath();                                                                                                  // 3354\n\t\t\t\tctx.stroke();                                                                                                     // 3355\n                                                                                                                      // 3356\n\t\t\t\tctx.fillStyle = dataset.fillColor;                                                                                // 3357\n\t\t\t\tctx.fill();                                                                                                       // 3358\n                                                                                                                      // 3359\n\t\t\t\t//Now draw the points over the line                                                                               // 3360\n\t\t\t\t//A little inefficient double looping, but better than the line                                                   // 3361\n\t\t\t\t//lagging behind the point positions                                                                              // 3362\n\t\t\t\thelpers.each(dataset.points,function(point){                                                                      // 3363\n\t\t\t\t\tif (point.hasValue()){                                                                                           // 3364\n\t\t\t\t\t\tpoint.draw();                                                                                                   // 3365\n\t\t\t\t\t}                                                                                                                // 3366\n\t\t\t\t});                                                                                                               // 3367\n                                                                                                                      // 3368\n\t\t\t},this);                                                                                                           // 3369\n                                                                                                                      // 3370\n\t\t}                                                                                                                   // 3371\n                                                                                                                      // 3372\n\t});                                                                                                                  // 3373\n                                                                                                                      // 3374\n                                                                                                                      // 3375\n                                                                                                                      // 3376\n                                                                                                                      // 3377\n                                                                                                                      // 3378\n}).call(this);                                                                                                        // 3379\n                                                                                                                      // 3380\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/chart:chart/meteor/export.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*global Chart:true*/  // Meteor creates a file-scope global for exporting. This comment prevents a potential JSHint warning.\nChart = window.Chart;                                                                                                 // 2\ndelete window.Chart;                                                                                                  // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}